// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Token extends pulumi.CustomResource {
    /**
     * Get an existing Token resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TokenState, opts?: pulumi.CustomResourceOptions): Token {
        return new Token(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/token:Token';

    /**
     * Returns true if the given object is an instance of Token.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Token {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Token.__pulumiType;
    }

    /**
     * The access_key.
     */
    public /*out*/ readonly accessKey!: pulumi.Output<string>;
    /**
     * The ip used to create the key.
     */
    public /*out*/ readonly creationIp!: pulumi.Output<string>;
    /**
     * The token description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The account email. Defaults to registered user.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * The tokens expiration date
     */
    public /*out*/ readonly expirationDate!: pulumi.Output<string>;
    /**
     * Defines if the token is set to expire
     */
    public readonly expires!: pulumi.Output<boolean | undefined>;
    /**
     * User password, in case a login is require
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The secret_key.
     */
    public /*out*/ readonly secretKey!: pulumi.Output<string>;
    /**
     * The userid of the associated user.
     */
    public /*out*/ readonly userId!: pulumi.Output<string>;

    /**
     * Create a Token resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TokenArgs | TokenState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as TokenState | undefined;
            inputs["accessKey"] = state ? state.accessKey : undefined;
            inputs["creationIp"] = state ? state.creationIp : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["email"] = state ? state.email : undefined;
            inputs["expirationDate"] = state ? state.expirationDate : undefined;
            inputs["expires"] = state ? state.expires : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["secretKey"] = state ? state.secretKey : undefined;
            inputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as TokenArgs | undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["email"] = args ? args.email : undefined;
            inputs["expires"] = args ? args.expires : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["accessKey"] = undefined /*out*/;
            inputs["creationIp"] = undefined /*out*/;
            inputs["expirationDate"] = undefined /*out*/;
            inputs["secretKey"] = undefined /*out*/;
            inputs["userId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Token.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Token resources.
 */
export interface TokenState {
    /**
     * The access_key.
     */
    readonly accessKey?: pulumi.Input<string>;
    /**
     * The ip used to create the key.
     */
    readonly creationIp?: pulumi.Input<string>;
    /**
     * The token description.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The account email. Defaults to registered user.
     */
    readonly email?: pulumi.Input<string>;
    /**
     * The tokens expiration date
     */
    readonly expirationDate?: pulumi.Input<string>;
    /**
     * Defines if the token is set to expire
     */
    readonly expires?: pulumi.Input<boolean>;
    /**
     * User password, in case a login is require
     */
    readonly password?: pulumi.Input<string>;
    /**
     * The secret_key.
     */
    readonly secretKey?: pulumi.Input<string>;
    /**
     * The userid of the associated user.
     */
    readonly userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Token resource.
 */
export interface TokenArgs {
    /**
     * The token description.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The account email. Defaults to registered user.
     */
    readonly email?: pulumi.Input<string>;
    /**
     * Defines if the token is set to expire
     */
    readonly expires?: pulumi.Input<boolean>;
    /**
     * User password, in case a login is require
     */
    readonly password?: pulumi.Input<string>;
}
