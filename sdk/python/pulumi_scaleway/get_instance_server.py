# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetInstanceServerResult:
    """
    A collection of values returned by getInstanceServer.
    """
    def __init__(__self__, additional_volume_ids=None, boot_type=None, cloud_init=None, disable_dynamic_ip=None, disable_public_ip=None, enable_dynamic_ip=None, enable_ipv6=None, id=None, image=None, ip_id=None, ipv6_address=None, ipv6_gateway=None, ipv6_prefix_length=None, name=None, organization_id=None, placement_group_id=None, placement_group_policy_respected=None, private_ip=None, public_ip=None, root_volumes=None, security_group_id=None, server_id=None, state=None, tags=None, type=None, user_datas=None, zone=None):
        if additional_volume_ids and not isinstance(additional_volume_ids, list):
            raise TypeError("Expected argument 'additional_volume_ids' to be a list")
        __self__.additional_volume_ids = additional_volume_ids
        if boot_type and not isinstance(boot_type, str):
            raise TypeError("Expected argument 'boot_type' to be a str")
        __self__.boot_type = boot_type
        if cloud_init and not isinstance(cloud_init, str):
            raise TypeError("Expected argument 'cloud_init' to be a str")
        __self__.cloud_init = cloud_init
        if disable_dynamic_ip and not isinstance(disable_dynamic_ip, bool):
            raise TypeError("Expected argument 'disable_dynamic_ip' to be a bool")
        __self__.disable_dynamic_ip = disable_dynamic_ip
        if disable_public_ip and not isinstance(disable_public_ip, bool):
            raise TypeError("Expected argument 'disable_public_ip' to be a bool")
        __self__.disable_public_ip = disable_public_ip
        if enable_dynamic_ip and not isinstance(enable_dynamic_ip, bool):
            raise TypeError("Expected argument 'enable_dynamic_ip' to be a bool")
        __self__.enable_dynamic_ip = enable_dynamic_ip
        if enable_ipv6 and not isinstance(enable_ipv6, bool):
            raise TypeError("Expected argument 'enable_ipv6' to be a bool")
        __self__.enable_ipv6 = enable_ipv6
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if image and not isinstance(image, str):
            raise TypeError("Expected argument 'image' to be a str")
        __self__.image = image
        if ip_id and not isinstance(ip_id, str):
            raise TypeError("Expected argument 'ip_id' to be a str")
        __self__.ip_id = ip_id
        if ipv6_address and not isinstance(ipv6_address, str):
            raise TypeError("Expected argument 'ipv6_address' to be a str")
        __self__.ipv6_address = ipv6_address
        if ipv6_gateway and not isinstance(ipv6_gateway, str):
            raise TypeError("Expected argument 'ipv6_gateway' to be a str")
        __self__.ipv6_gateway = ipv6_gateway
        if ipv6_prefix_length and not isinstance(ipv6_prefix_length, float):
            raise TypeError("Expected argument 'ipv6_prefix_length' to be a float")
        __self__.ipv6_prefix_length = ipv6_prefix_length
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        __self__.organization_id = organization_id
        if placement_group_id and not isinstance(placement_group_id, str):
            raise TypeError("Expected argument 'placement_group_id' to be a str")
        __self__.placement_group_id = placement_group_id
        if placement_group_policy_respected and not isinstance(placement_group_policy_respected, bool):
            raise TypeError("Expected argument 'placement_group_policy_respected' to be a bool")
        __self__.placement_group_policy_respected = placement_group_policy_respected
        if private_ip and not isinstance(private_ip, str):
            raise TypeError("Expected argument 'private_ip' to be a str")
        __self__.private_ip = private_ip
        if public_ip and not isinstance(public_ip, str):
            raise TypeError("Expected argument 'public_ip' to be a str")
        __self__.public_ip = public_ip
        if root_volumes and not isinstance(root_volumes, list):
            raise TypeError("Expected argument 'root_volumes' to be a list")
        __self__.root_volumes = root_volumes
        if security_group_id and not isinstance(security_group_id, str):
            raise TypeError("Expected argument 'security_group_id' to be a str")
        __self__.security_group_id = security_group_id
        if server_id and not isinstance(server_id, str):
            raise TypeError("Expected argument 'server_id' to be a str")
        __self__.server_id = server_id
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        __self__.state = state
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        __self__.tags = tags
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        if user_datas and not isinstance(user_datas, list):
            raise TypeError("Expected argument 'user_datas' to be a list")
        __self__.user_datas = user_datas
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        __self__.zone = zone
class AwaitableGetInstanceServerResult(GetInstanceServerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceServerResult(
            additional_volume_ids=self.additional_volume_ids,
            boot_type=self.boot_type,
            cloud_init=self.cloud_init,
            disable_dynamic_ip=self.disable_dynamic_ip,
            disable_public_ip=self.disable_public_ip,
            enable_dynamic_ip=self.enable_dynamic_ip,
            enable_ipv6=self.enable_ipv6,
            id=self.id,
            image=self.image,
            ip_id=self.ip_id,
            ipv6_address=self.ipv6_address,
            ipv6_gateway=self.ipv6_gateway,
            ipv6_prefix_length=self.ipv6_prefix_length,
            name=self.name,
            organization_id=self.organization_id,
            placement_group_id=self.placement_group_id,
            placement_group_policy_respected=self.placement_group_policy_respected,
            private_ip=self.private_ip,
            public_ip=self.public_ip,
            root_volumes=self.root_volumes,
            security_group_id=self.security_group_id,
            server_id=self.server_id,
            state=self.state,
            tags=self.tags,
            type=self.type,
            user_datas=self.user_datas,
            zone=self.zone)

def get_instance_server(name=None,server_id=None,zone=None,opts=None):
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()


    __args__['name'] = name
    __args__['serverId'] = server_id
    __args__['zone'] = zone
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('scaleway:index/getInstanceServer:getInstanceServer', __args__, opts=opts).value

    return AwaitableGetInstanceServerResult(
        additional_volume_ids=__ret__.get('additionalVolumeIds'),
        boot_type=__ret__.get('bootType'),
        cloud_init=__ret__.get('cloudInit'),
        disable_dynamic_ip=__ret__.get('disableDynamicIp'),
        disable_public_ip=__ret__.get('disablePublicIp'),
        enable_dynamic_ip=__ret__.get('enableDynamicIp'),
        enable_ipv6=__ret__.get('enableIpv6'),
        id=__ret__.get('id'),
        image=__ret__.get('image'),
        ip_id=__ret__.get('ipId'),
        ipv6_address=__ret__.get('ipv6Address'),
        ipv6_gateway=__ret__.get('ipv6Gateway'),
        ipv6_prefix_length=__ret__.get('ipv6PrefixLength'),
        name=__ret__.get('name'),
        organization_id=__ret__.get('organizationId'),
        placement_group_id=__ret__.get('placementGroupId'),
        placement_group_policy_respected=__ret__.get('placementGroupPolicyRespected'),
        private_ip=__ret__.get('privateIp'),
        public_ip=__ret__.get('publicIp'),
        root_volumes=__ret__.get('rootVolumes'),
        security_group_id=__ret__.get('securityGroupId'),
        server_id=__ret__.get('serverId'),
        state=__ret__.get('state'),
        tags=__ret__.get('tags'),
        type=__ret__.get('type'),
        user_datas=__ret__.get('userDatas'),
        zone=__ret__.get('zone'))
