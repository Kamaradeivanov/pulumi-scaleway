# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class SecurityGroupRule(pulumi.CustomResource):
    action: pulumi.Output[str]
    """
    The action to take when the security group rule is triggered (accept or drop)
    """
    direction: pulumi.Output[str]
    """
    The direction the traffic is affected (inbound or outbound)
    """
    ip_range: pulumi.Output[str]
    """
    The ip range affected by the security group rule
    """
    port: pulumi.Output[float]
    """
    The port affected by the security group rule
    """
    protocol: pulumi.Output[str]
    """
    The protocol of the security group rule (ICMP, TCP or UDP)
    """
    security_group: pulumi.Output[str]
    """
    The security group this rule is attached to
    """
    def __init__(__self__, resource_name, opts=None, action=None, direction=None, ip_range=None, port=None, protocol=None, security_group=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a SecurityGroupRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: The action to take when the security group rule is triggered (accept or drop)
        :param pulumi.Input[str] direction: The direction the traffic is affected (inbound or outbound)
        :param pulumi.Input[str] ip_range: The ip range affected by the security group rule
        :param pulumi.Input[float] port: The port affected by the security group rule
        :param pulumi.Input[str] protocol: The protocol of the security group rule (ICMP, TCP or UDP)
        :param pulumi.Input[str] security_group: The security group this rule is attached to
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if action is None:
                raise TypeError("Missing required property 'action'")
            __props__['action'] = action
            if direction is None:
                raise TypeError("Missing required property 'direction'")
            __props__['direction'] = direction
            if ip_range is None:
                raise TypeError("Missing required property 'ip_range'")
            __props__['ip_range'] = ip_range
            __props__['port'] = port
            if protocol is None:
                raise TypeError("Missing required property 'protocol'")
            __props__['protocol'] = protocol
            if security_group is None:
                raise TypeError("Missing required property 'security_group'")
            __props__['security_group'] = security_group
        super(SecurityGroupRule, __self__).__init__(
            'scaleway:index/securityGroupRule:SecurityGroupRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, action=None, direction=None, ip_range=None, port=None, protocol=None, security_group=None):
        """
        Get an existing SecurityGroupRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: The action to take when the security group rule is triggered (accept or drop)
        :param pulumi.Input[str] direction: The direction the traffic is affected (inbound or outbound)
        :param pulumi.Input[str] ip_range: The ip range affected by the security group rule
        :param pulumi.Input[float] port: The port affected by the security group rule
        :param pulumi.Input[str] protocol: The protocol of the security group rule (ICMP, TCP or UDP)
        :param pulumi.Input[str] security_group: The security group this rule is attached to
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["action"] = action
        __props__["direction"] = direction
        __props__["ip_range"] = ip_range
        __props__["port"] = port
        __props__["protocol"] = protocol
        __props__["security_group"] = security_group
        return SecurityGroupRule(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
