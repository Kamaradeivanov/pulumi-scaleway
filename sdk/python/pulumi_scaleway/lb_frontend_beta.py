# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class LbFrontendBeta(pulumi.CustomResource):
    acls: pulumi.Output[list]
    """
    ACL rules

      * `action` (`dict`)
        * `type` (`str`)

      * `match` (`dict`)
        * `httpFilter` (`str`)
        * `httpFilterValues` (`list`)
        * `invert` (`bool`)
        * `ipSubnets` (`list`)

      * `name` (`str`)
      * `organization_id` (`str`)
      * `region` (`str`)
    """
    backend_id: pulumi.Output[str]
    """
    The load-balancer backend ID
    """
    certificate_id: pulumi.Output[str]
    """
    Certificate ID
    """
    inbound_port: pulumi.Output[float]
    """
    TCP port to listen on the front side
    """
    lb_id: pulumi.Output[str]
    """
    The load-balancer ID
    """
    name: pulumi.Output[str]
    """
    The name of the frontend
    """
    timeout_client: pulumi.Output[str]
    """
    Set the maximum inactivity time on the client side
    """
    def __init__(__self__, resource_name, opts=None, acls=None, backend_id=None, certificate_id=None, inbound_port=None, lb_id=None, name=None, timeout_client=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a LbFrontendBeta resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] acls: ACL rules
        :param pulumi.Input[str] backend_id: The load-balancer backend ID
        :param pulumi.Input[str] certificate_id: Certificate ID
        :param pulumi.Input[float] inbound_port: TCP port to listen on the front side
        :param pulumi.Input[str] lb_id: The load-balancer ID
        :param pulumi.Input[str] name: The name of the frontend
        :param pulumi.Input[str] timeout_client: Set the maximum inactivity time on the client side

        The **acls** object supports the following:

          * `action` (`pulumi.Input[dict]`)
            * `type` (`pulumi.Input[str]`)

          * `match` (`pulumi.Input[dict]`)
            * `httpFilter` (`pulumi.Input[str]`)
            * `httpFilterValues` (`pulumi.Input[list]`)
            * `invert` (`pulumi.Input[bool]`)
            * `ipSubnets` (`pulumi.Input[list]`)

          * `name` (`pulumi.Input[str]`)
          * `organization_id` (`pulumi.Input[str]`)
          * `region` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['acls'] = acls
            if backend_id is None:
                raise TypeError("Missing required property 'backend_id'")
            __props__['backend_id'] = backend_id
            __props__['certificate_id'] = certificate_id
            if inbound_port is None:
                raise TypeError("Missing required property 'inbound_port'")
            __props__['inbound_port'] = inbound_port
            if lb_id is None:
                raise TypeError("Missing required property 'lb_id'")
            __props__['lb_id'] = lb_id
            __props__['name'] = name
            __props__['timeout_client'] = timeout_client
        super(LbFrontendBeta, __self__).__init__(
            'scaleway:index/lbFrontendBeta:LbFrontendBeta',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, acls=None, backend_id=None, certificate_id=None, inbound_port=None, lb_id=None, name=None, timeout_client=None):
        """
        Get an existing LbFrontendBeta resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] acls: ACL rules
        :param pulumi.Input[str] backend_id: The load-balancer backend ID
        :param pulumi.Input[str] certificate_id: Certificate ID
        :param pulumi.Input[float] inbound_port: TCP port to listen on the front side
        :param pulumi.Input[str] lb_id: The load-balancer ID
        :param pulumi.Input[str] name: The name of the frontend
        :param pulumi.Input[str] timeout_client: Set the maximum inactivity time on the client side

        The **acls** object supports the following:

          * `action` (`pulumi.Input[dict]`)
            * `type` (`pulumi.Input[str]`)

          * `match` (`pulumi.Input[dict]`)
            * `httpFilter` (`pulumi.Input[str]`)
            * `httpFilterValues` (`pulumi.Input[list]`)
            * `invert` (`pulumi.Input[bool]`)
            * `ipSubnets` (`pulumi.Input[list]`)

          * `name` (`pulumi.Input[str]`)
          * `organization_id` (`pulumi.Input[str]`)
          * `region` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["acls"] = acls
        __props__["backend_id"] = backend_id
        __props__["certificate_id"] = certificate_id
        __props__["inbound_port"] = inbound_port
        __props__["lb_id"] = lb_id
        __props__["name"] = name
        __props__["timeout_client"] = timeout_client
        return LbFrontendBeta(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
