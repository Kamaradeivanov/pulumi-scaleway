// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class UserData extends pulumi.CustomResource {
    /**
     * Get an existing UserData resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserDataState, opts?: pulumi.CustomResourceOptions): UserData {
        return new UserData(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/userData:UserData';

    /**
     * Returns true if the given object is an instance of UserData.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserData {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserData.__pulumiType;
    }

    /**
     * The key of the user data to manage
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * The server the meta data is associated with
     */
    public readonly server!: pulumi.Output<string>;
    /**
     * The value of the user
     */
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a UserData resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserDataArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserDataArgs | UserDataState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as UserDataState | undefined;
            inputs["key"] = state ? state.key : undefined;
            inputs["server"] = state ? state.server : undefined;
            inputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as UserDataArgs | undefined;
            if (!args || args.key === undefined) {
                throw new Error("Missing required property 'key'");
            }
            if (!args || args.server === undefined) {
                throw new Error("Missing required property 'server'");
            }
            if (!args || args.value === undefined) {
                throw new Error("Missing required property 'value'");
            }
            inputs["key"] = args ? args.key : undefined;
            inputs["server"] = args ? args.server : undefined;
            inputs["value"] = args ? args.value : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(UserData.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserData resources.
 */
export interface UserDataState {
    /**
     * The key of the user data to manage
     */
    readonly key?: pulumi.Input<string>;
    /**
     * The server the meta data is associated with
     */
    readonly server?: pulumi.Input<string>;
    /**
     * The value of the user
     */
    readonly value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserData resource.
 */
export interface UserDataArgs {
    /**
     * The key of the user data to manage
     */
    readonly key: pulumi.Input<string>;
    /**
     * The server the meta data is associated with
     */
    readonly server: pulumi.Input<string>;
    /**
     * The value of the user
     */
    readonly value: pulumi.Input<string>;
}
