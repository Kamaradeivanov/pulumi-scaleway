// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    /**
     * The boot_type of the server
     */
    public readonly bootType!: pulumi.Output<string>;
    /**
     * The boot configuration of the server
     */
    public readonly bootscript!: pulumi.Output<string | undefined>;
    /**
     * the cloudinit script associated with this server
     */
    public readonly cloudinit!: pulumi.Output<string>;
    /**
     * determines if a public IP address should be allocated for the server
     */
    public readonly dynamicIpRequired!: pulumi.Output<boolean | undefined>;
    /**
     * determines if IPv6 is enabled for the server
     */
    public readonly enableIpv6!: pulumi.Output<boolean | undefined>;
    /**
     * The base image of the server
     */
    public readonly image!: pulumi.Output<string>;
    /**
     * The name of the server
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * the Scaleway internal IP address of the server
     */
    public /*out*/ readonly privateIp!: pulumi.Output<string>;
    /**
     * the public IPv4 address of the server
     */
    public readonly publicIp!: pulumi.Output<string>;
    /**
     * the public IPv6 address of the server, if enabled
     */
    public /*out*/ readonly publicIpv6!: pulumi.Output<string>;
    /**
     * The security group the server is attached to
     */
    public readonly securityGroup!: pulumi.Output<string | undefined>;
    /**
     * the server state (running, stopped)
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * scaleway description of the server state
     */
    public /*out*/ readonly stateDetail!: pulumi.Output<string>;
    /**
     * The tags associated with the server
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The instance type of the server
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Volumes attached to the server on creation
     */
    public readonly volumes!: pulumi.Output<outputs.ServerVolume[] | undefined>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ServerState | undefined;
            inputs["bootType"] = state ? state.bootType : undefined;
            inputs["bootscript"] = state ? state.bootscript : undefined;
            inputs["cloudinit"] = state ? state.cloudinit : undefined;
            inputs["dynamicIpRequired"] = state ? state.dynamicIpRequired : undefined;
            inputs["enableIpv6"] = state ? state.enableIpv6 : undefined;
            inputs["image"] = state ? state.image : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["privateIp"] = state ? state.privateIp : undefined;
            inputs["publicIp"] = state ? state.publicIp : undefined;
            inputs["publicIpv6"] = state ? state.publicIpv6 : undefined;
            inputs["securityGroup"] = state ? state.securityGroup : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["stateDetail"] = state ? state.stateDetail : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["volumes"] = state ? state.volumes : undefined;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            if (!args || args.image === undefined) {
                throw new Error("Missing required property 'image'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["bootType"] = args ? args.bootType : undefined;
            inputs["bootscript"] = args ? args.bootscript : undefined;
            inputs["cloudinit"] = args ? args.cloudinit : undefined;
            inputs["dynamicIpRequired"] = args ? args.dynamicIpRequired : undefined;
            inputs["enableIpv6"] = args ? args.enableIpv6 : undefined;
            inputs["image"] = args ? args.image : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["publicIp"] = args ? args.publicIp : undefined;
            inputs["securityGroup"] = args ? args.securityGroup : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["volumes"] = args ? args.volumes : undefined;
            inputs["privateIp"] = undefined /*out*/;
            inputs["publicIpv6"] = undefined /*out*/;
            inputs["stateDetail"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Server.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    /**
     * The boot_type of the server
     */
    readonly bootType?: pulumi.Input<string>;
    /**
     * The boot configuration of the server
     */
    readonly bootscript?: pulumi.Input<string>;
    /**
     * the cloudinit script associated with this server
     */
    readonly cloudinit?: pulumi.Input<string>;
    /**
     * determines if a public IP address should be allocated for the server
     */
    readonly dynamicIpRequired?: pulumi.Input<boolean>;
    /**
     * determines if IPv6 is enabled for the server
     */
    readonly enableIpv6?: pulumi.Input<boolean>;
    /**
     * The base image of the server
     */
    readonly image?: pulumi.Input<string>;
    /**
     * The name of the server
     */
    readonly name?: pulumi.Input<string>;
    /**
     * the Scaleway internal IP address of the server
     */
    readonly privateIp?: pulumi.Input<string>;
    /**
     * the public IPv4 address of the server
     */
    readonly publicIp?: pulumi.Input<string>;
    /**
     * the public IPv6 address of the server, if enabled
     */
    readonly publicIpv6?: pulumi.Input<string>;
    /**
     * The security group the server is attached to
     */
    readonly securityGroup?: pulumi.Input<string>;
    /**
     * the server state (running, stopped)
     */
    readonly state?: pulumi.Input<string>;
    /**
     * scaleway description of the server state
     */
    readonly stateDetail?: pulumi.Input<string>;
    /**
     * The tags associated with the server
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The instance type of the server
     */
    readonly type?: pulumi.Input<string>;
    /**
     * Volumes attached to the server on creation
     */
    readonly volumes?: pulumi.Input<pulumi.Input<inputs.ServerVolume>[]>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    /**
     * The boot_type of the server
     */
    readonly bootType?: pulumi.Input<string>;
    /**
     * The boot configuration of the server
     */
    readonly bootscript?: pulumi.Input<string>;
    /**
     * the cloudinit script associated with this server
     */
    readonly cloudinit?: pulumi.Input<string>;
    /**
     * determines if a public IP address should be allocated for the server
     */
    readonly dynamicIpRequired?: pulumi.Input<boolean>;
    /**
     * determines if IPv6 is enabled for the server
     */
    readonly enableIpv6?: pulumi.Input<boolean>;
    /**
     * The base image of the server
     */
    readonly image: pulumi.Input<string>;
    /**
     * The name of the server
     */
    readonly name?: pulumi.Input<string>;
    /**
     * the public IPv4 address of the server
     */
    readonly publicIp?: pulumi.Input<string>;
    /**
     * The security group the server is attached to
     */
    readonly securityGroup?: pulumi.Input<string>;
    /**
     * the server state (running, stopped)
     */
    readonly state?: pulumi.Input<string>;
    /**
     * The tags associated with the server
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The instance type of the server
     */
    readonly type: pulumi.Input<string>;
    /**
     * Volumes attached to the server on creation
     */
    readonly volumes?: pulumi.Input<pulumi.Input<inputs.ServerVolume>[]>;
}
