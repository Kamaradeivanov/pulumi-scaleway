// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LbBackendBeta extends pulumi.CustomResource {
    /**
     * Get an existing LbBackendBeta resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbBackendBetaState, opts?: pulumi.CustomResourceOptions): LbBackendBeta {
        return new LbBackendBeta(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/lbBackendBeta:LbBackendBeta';

    /**
     * Returns true if the given object is an instance of LbBackendBeta.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbBackendBeta {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbBackendBeta.__pulumiType;
    }

    /**
     * User sessions will be forwarded to this port of backend servers
     */
    public readonly forwardPort!: pulumi.Output<number>;
    /**
     * Load balancing algorithm
     */
    public readonly forwardPortAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * Backend protocol
     */
    public readonly forwardProtocol!: pulumi.Output<string>;
    /**
     * Interval between two HC requests
     */
    public readonly healthCheckDelay!: pulumi.Output<string | undefined>;
    public readonly healthCheckHttp!: pulumi.Output<outputs.LbBackendBetaHealthCheckHttp | undefined>;
    public readonly healthCheckHttps!: pulumi.Output<outputs.LbBackendBetaHealthCheckHttps | undefined>;
    /**
     * Number of allowed failed HC requests before the backend server is marked down
     */
    public readonly healthCheckMaxRetries!: pulumi.Output<number | undefined>;
    /**
     * Port the HC requests will be send to. Default to `forward_port`
     */
    public readonly healthCheckPort!: pulumi.Output<number>;
    public readonly healthCheckTcp!: pulumi.Output<outputs.LbBackendBetaHealthCheckTcp>;
    /**
     * Timeout before we consider a HC request failed
     */
    public readonly healthCheckTimeout!: pulumi.Output<string | undefined>;
    /**
     * The load-balancer ID
     */
    public readonly lbId!: pulumi.Output<string>;
    /**
     * The name of the backend
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Modify what occurs when a backend server is marked down
     */
    public readonly onMarkedDownAction!: pulumi.Output<string | undefined>;
    /**
     * Enables PROXY protocol version 2
     */
    public readonly sendProxyV2!: pulumi.Output<boolean | undefined>;
    /**
     * Backend server IP addresses list (IPv4 or IPv6)
     */
    public readonly serverIps!: pulumi.Output<string[] | undefined>;
    /**
     * Load balancing algorithm
     */
    public readonly stickySessions!: pulumi.Output<string | undefined>;
    /**
     * Cookie name for for sticky sessions
     */
    public readonly stickySessionsCookieName!: pulumi.Output<string | undefined>;
    /**
     * Maximum initial server connection establishment time
     */
    public readonly timeoutConnect!: pulumi.Output<string | undefined>;
    /**
     * Maximum server connection inactivity time
     */
    public readonly timeoutServer!: pulumi.Output<string | undefined>;
    /**
     * Maximum tunnel inactivity time
     */
    public readonly timeoutTunnel!: pulumi.Output<string | undefined>;

    /**
     * Create a LbBackendBeta resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbBackendBetaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbBackendBetaArgs | LbBackendBetaState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as LbBackendBetaState | undefined;
            inputs["forwardPort"] = state ? state.forwardPort : undefined;
            inputs["forwardPortAlgorithm"] = state ? state.forwardPortAlgorithm : undefined;
            inputs["forwardProtocol"] = state ? state.forwardProtocol : undefined;
            inputs["healthCheckDelay"] = state ? state.healthCheckDelay : undefined;
            inputs["healthCheckHttp"] = state ? state.healthCheckHttp : undefined;
            inputs["healthCheckHttps"] = state ? state.healthCheckHttps : undefined;
            inputs["healthCheckMaxRetries"] = state ? state.healthCheckMaxRetries : undefined;
            inputs["healthCheckPort"] = state ? state.healthCheckPort : undefined;
            inputs["healthCheckTcp"] = state ? state.healthCheckTcp : undefined;
            inputs["healthCheckTimeout"] = state ? state.healthCheckTimeout : undefined;
            inputs["lbId"] = state ? state.lbId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["onMarkedDownAction"] = state ? state.onMarkedDownAction : undefined;
            inputs["sendProxyV2"] = state ? state.sendProxyV2 : undefined;
            inputs["serverIps"] = state ? state.serverIps : undefined;
            inputs["stickySessions"] = state ? state.stickySessions : undefined;
            inputs["stickySessionsCookieName"] = state ? state.stickySessionsCookieName : undefined;
            inputs["timeoutConnect"] = state ? state.timeoutConnect : undefined;
            inputs["timeoutServer"] = state ? state.timeoutServer : undefined;
            inputs["timeoutTunnel"] = state ? state.timeoutTunnel : undefined;
        } else {
            const args = argsOrState as LbBackendBetaArgs | undefined;
            if (!args || args.forwardPort === undefined) {
                throw new Error("Missing required property 'forwardPort'");
            }
            if (!args || args.forwardProtocol === undefined) {
                throw new Error("Missing required property 'forwardProtocol'");
            }
            if (!args || args.lbId === undefined) {
                throw new Error("Missing required property 'lbId'");
            }
            inputs["forwardPort"] = args ? args.forwardPort : undefined;
            inputs["forwardPortAlgorithm"] = args ? args.forwardPortAlgorithm : undefined;
            inputs["forwardProtocol"] = args ? args.forwardProtocol : undefined;
            inputs["healthCheckDelay"] = args ? args.healthCheckDelay : undefined;
            inputs["healthCheckHttp"] = args ? args.healthCheckHttp : undefined;
            inputs["healthCheckHttps"] = args ? args.healthCheckHttps : undefined;
            inputs["healthCheckMaxRetries"] = args ? args.healthCheckMaxRetries : undefined;
            inputs["healthCheckPort"] = args ? args.healthCheckPort : undefined;
            inputs["healthCheckTcp"] = args ? args.healthCheckTcp : undefined;
            inputs["healthCheckTimeout"] = args ? args.healthCheckTimeout : undefined;
            inputs["lbId"] = args ? args.lbId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["onMarkedDownAction"] = args ? args.onMarkedDownAction : undefined;
            inputs["sendProxyV2"] = args ? args.sendProxyV2 : undefined;
            inputs["serverIps"] = args ? args.serverIps : undefined;
            inputs["stickySessions"] = args ? args.stickySessions : undefined;
            inputs["stickySessionsCookieName"] = args ? args.stickySessionsCookieName : undefined;
            inputs["timeoutConnect"] = args ? args.timeoutConnect : undefined;
            inputs["timeoutServer"] = args ? args.timeoutServer : undefined;
            inputs["timeoutTunnel"] = args ? args.timeoutTunnel : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(LbBackendBeta.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LbBackendBeta resources.
 */
export interface LbBackendBetaState {
    /**
     * User sessions will be forwarded to this port of backend servers
     */
    readonly forwardPort?: pulumi.Input<number>;
    /**
     * Load balancing algorithm
     */
    readonly forwardPortAlgorithm?: pulumi.Input<string>;
    /**
     * Backend protocol
     */
    readonly forwardProtocol?: pulumi.Input<string>;
    /**
     * Interval between two HC requests
     */
    readonly healthCheckDelay?: pulumi.Input<string>;
    readonly healthCheckHttp?: pulumi.Input<inputs.LbBackendBetaHealthCheckHttp>;
    readonly healthCheckHttps?: pulumi.Input<inputs.LbBackendBetaHealthCheckHttps>;
    /**
     * Number of allowed failed HC requests before the backend server is marked down
     */
    readonly healthCheckMaxRetries?: pulumi.Input<number>;
    /**
     * Port the HC requests will be send to. Default to `forward_port`
     */
    readonly healthCheckPort?: pulumi.Input<number>;
    readonly healthCheckTcp?: pulumi.Input<inputs.LbBackendBetaHealthCheckTcp>;
    /**
     * Timeout before we consider a HC request failed
     */
    readonly healthCheckTimeout?: pulumi.Input<string>;
    /**
     * The load-balancer ID
     */
    readonly lbId?: pulumi.Input<string>;
    /**
     * The name of the backend
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Modify what occurs when a backend server is marked down
     */
    readonly onMarkedDownAction?: pulumi.Input<string>;
    /**
     * Enables PROXY protocol version 2
     */
    readonly sendProxyV2?: pulumi.Input<boolean>;
    /**
     * Backend server IP addresses list (IPv4 or IPv6)
     */
    readonly serverIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Load balancing algorithm
     */
    readonly stickySessions?: pulumi.Input<string>;
    /**
     * Cookie name for for sticky sessions
     */
    readonly stickySessionsCookieName?: pulumi.Input<string>;
    /**
     * Maximum initial server connection establishment time
     */
    readonly timeoutConnect?: pulumi.Input<string>;
    /**
     * Maximum server connection inactivity time
     */
    readonly timeoutServer?: pulumi.Input<string>;
    /**
     * Maximum tunnel inactivity time
     */
    readonly timeoutTunnel?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LbBackendBeta resource.
 */
export interface LbBackendBetaArgs {
    /**
     * User sessions will be forwarded to this port of backend servers
     */
    readonly forwardPort: pulumi.Input<number>;
    /**
     * Load balancing algorithm
     */
    readonly forwardPortAlgorithm?: pulumi.Input<string>;
    /**
     * Backend protocol
     */
    readonly forwardProtocol: pulumi.Input<string>;
    /**
     * Interval between two HC requests
     */
    readonly healthCheckDelay?: pulumi.Input<string>;
    readonly healthCheckHttp?: pulumi.Input<inputs.LbBackendBetaHealthCheckHttp>;
    readonly healthCheckHttps?: pulumi.Input<inputs.LbBackendBetaHealthCheckHttps>;
    /**
     * Number of allowed failed HC requests before the backend server is marked down
     */
    readonly healthCheckMaxRetries?: pulumi.Input<number>;
    /**
     * Port the HC requests will be send to. Default to `forward_port`
     */
    readonly healthCheckPort?: pulumi.Input<number>;
    readonly healthCheckTcp?: pulumi.Input<inputs.LbBackendBetaHealthCheckTcp>;
    /**
     * Timeout before we consider a HC request failed
     */
    readonly healthCheckTimeout?: pulumi.Input<string>;
    /**
     * The load-balancer ID
     */
    readonly lbId: pulumi.Input<string>;
    /**
     * The name of the backend
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Modify what occurs when a backend server is marked down
     */
    readonly onMarkedDownAction?: pulumi.Input<string>;
    /**
     * Enables PROXY protocol version 2
     */
    readonly sendProxyV2?: pulumi.Input<boolean>;
    /**
     * Backend server IP addresses list (IPv4 or IPv6)
     */
    readonly serverIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Load balancing algorithm
     */
    readonly stickySessions?: pulumi.Input<string>;
    /**
     * Cookie name for for sticky sessions
     */
    readonly stickySessionsCookieName?: pulumi.Input<string>;
    /**
     * Maximum initial server connection establishment time
     */
    readonly timeoutConnect?: pulumi.Input<string>;
    /**
     * Maximum server connection inactivity time
     */
    readonly timeoutServer?: pulumi.Input<string>;
    /**
     * Maximum tunnel inactivity time
     */
    readonly timeoutTunnel?: pulumi.Input<string>;
}
