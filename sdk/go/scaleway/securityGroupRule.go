// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type SecurityGroupRule struct {
	pulumi.CustomResourceState

	// The action to take when the security group rule is triggered (accept or drop)
	Action pulumi.StringOutput `pulumi:"action"`
	// The direction the traffic is affected (inbound or outbound)
	Direction pulumi.StringOutput `pulumi:"direction"`
	// The ip range affected by the security group rule
	IpRange pulumi.StringOutput `pulumi:"ipRange"`
	// The port affected by the security group rule
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// The protocol of the security group rule (ICMP, TCP or UDP)
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The security group this rule is attached to
	SecurityGroup pulumi.StringOutput `pulumi:"securityGroup"`
}

// NewSecurityGroupRule registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroupRule(ctx *pulumi.Context,
	name string, args *SecurityGroupRuleArgs, opts ...pulumi.ResourceOption) (*SecurityGroupRule, error) {
	if args == nil || args.Action == nil {
		return nil, errors.New("missing required argument 'Action'")
	}
	if args == nil || args.Direction == nil {
		return nil, errors.New("missing required argument 'Direction'")
	}
	if args == nil || args.IpRange == nil {
		return nil, errors.New("missing required argument 'IpRange'")
	}
	if args == nil || args.Protocol == nil {
		return nil, errors.New("missing required argument 'Protocol'")
	}
	if args == nil || args.SecurityGroup == nil {
		return nil, errors.New("missing required argument 'SecurityGroup'")
	}
	if args == nil {
		args = &SecurityGroupRuleArgs{}
	}
	var resource SecurityGroupRule
	err := ctx.RegisterResource("scaleway:index/securityGroupRule:SecurityGroupRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroupRule gets an existing SecurityGroupRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroupRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupRuleState, opts ...pulumi.ResourceOption) (*SecurityGroupRule, error) {
	var resource SecurityGroupRule
	err := ctx.ReadResource("scaleway:index/securityGroupRule:SecurityGroupRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroupRule resources.
type securityGroupRuleState struct {
	// The action to take when the security group rule is triggered (accept or drop)
	Action *string `pulumi:"action"`
	// The direction the traffic is affected (inbound or outbound)
	Direction *string `pulumi:"direction"`
	// The ip range affected by the security group rule
	IpRange *string `pulumi:"ipRange"`
	// The port affected by the security group rule
	Port *int `pulumi:"port"`
	// The protocol of the security group rule (ICMP, TCP or UDP)
	Protocol *string `pulumi:"protocol"`
	// The security group this rule is attached to
	SecurityGroup *string `pulumi:"securityGroup"`
}

type SecurityGroupRuleState struct {
	// The action to take when the security group rule is triggered (accept or drop)
	Action pulumi.StringPtrInput
	// The direction the traffic is affected (inbound or outbound)
	Direction pulumi.StringPtrInput
	// The ip range affected by the security group rule
	IpRange pulumi.StringPtrInput
	// The port affected by the security group rule
	Port pulumi.IntPtrInput
	// The protocol of the security group rule (ICMP, TCP or UDP)
	Protocol pulumi.StringPtrInput
	// The security group this rule is attached to
	SecurityGroup pulumi.StringPtrInput
}

func (SecurityGroupRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupRuleState)(nil)).Elem()
}

type securityGroupRuleArgs struct {
	// The action to take when the security group rule is triggered (accept or drop)
	Action string `pulumi:"action"`
	// The direction the traffic is affected (inbound or outbound)
	Direction string `pulumi:"direction"`
	// The ip range affected by the security group rule
	IpRange string `pulumi:"ipRange"`
	// The port affected by the security group rule
	Port *int `pulumi:"port"`
	// The protocol of the security group rule (ICMP, TCP or UDP)
	Protocol string `pulumi:"protocol"`
	// The security group this rule is attached to
	SecurityGroup string `pulumi:"securityGroup"`
}

// The set of arguments for constructing a SecurityGroupRule resource.
type SecurityGroupRuleArgs struct {
	// The action to take when the security group rule is triggered (accept or drop)
	Action pulumi.StringInput
	// The direction the traffic is affected (inbound or outbound)
	Direction pulumi.StringInput
	// The ip range affected by the security group rule
	IpRange pulumi.StringInput
	// The port affected by the security group rule
	Port pulumi.IntPtrInput
	// The protocol of the security group rule (ICMP, TCP or UDP)
	Protocol pulumi.StringInput
	// The security group this rule is attached to
	SecurityGroup pulumi.StringInput
}

func (SecurityGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupRuleArgs)(nil)).Elem()
}
