# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class Server(pulumi.CustomResource):
    boot_type: pulumi.Output[str]
    """
    The boot_type of the server
    """
    bootscript: pulumi.Output[str]
    """
    The boot configuration of the server
    """
    cloudinit: pulumi.Output[str]
    """
    the cloudinit script associated with this server
    """
    dynamic_ip_required: pulumi.Output[bool]
    """
    determines if a public IP address should be allocated for the server
    """
    enable_ipv6: pulumi.Output[bool]
    """
    determines if IPv6 is enabled for the server
    """
    image: pulumi.Output[str]
    """
    The base image of the server
    """
    name: pulumi.Output[str]
    """
    The name of the server
    """
    private_ip: pulumi.Output[str]
    """
    the Scaleway internal IP address of the server
    """
    public_ip: pulumi.Output[str]
    """
    the public IPv4 address of the server
    """
    public_ipv6: pulumi.Output[str]
    """
    the public IPv6 address of the server, if enabled
    """
    security_group: pulumi.Output[str]
    """
    The security group the server is attached to
    """
    state: pulumi.Output[str]
    """
    the server state (running, stopped)
    """
    state_detail: pulumi.Output[str]
    """
    scaleway description of the server state
    """
    tags: pulumi.Output[list]
    """
    The tags associated with the server
    """
    type: pulumi.Output[str]
    """
    The instance type of the server
    """
    volumes: pulumi.Output[list]
    """
    Volumes attached to the server on creation

      * `size_in_gb` (`float`)
      * `type` (`str`)
      * `volumeId` (`str`)
    """
    def __init__(__self__, resource_name, opts=None, boot_type=None, bootscript=None, cloudinit=None, dynamic_ip_required=None, enable_ipv6=None, image=None, name=None, public_ip=None, security_group=None, state=None, tags=None, type=None, volumes=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a Server resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] boot_type: The boot_type of the server
        :param pulumi.Input[str] bootscript: The boot configuration of the server
        :param pulumi.Input[str] cloudinit: the cloudinit script associated with this server
        :param pulumi.Input[bool] dynamic_ip_required: determines if a public IP address should be allocated for the server
        :param pulumi.Input[bool] enable_ipv6: determines if IPv6 is enabled for the server
        :param pulumi.Input[str] image: The base image of the server
        :param pulumi.Input[str] name: The name of the server
        :param pulumi.Input[str] public_ip: the public IPv4 address of the server
        :param pulumi.Input[str] security_group: The security group the server is attached to
        :param pulumi.Input[str] state: the server state (running, stopped)
        :param pulumi.Input[list] tags: The tags associated with the server
        :param pulumi.Input[str] type: The instance type of the server
        :param pulumi.Input[list] volumes: Volumes attached to the server on creation

        The **volumes** object supports the following:

          * `size_in_gb` (`pulumi.Input[float]`)
          * `type` (`pulumi.Input[str]`)
          * `volumeId` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['boot_type'] = boot_type
            __props__['bootscript'] = bootscript
            __props__['cloudinit'] = cloudinit
            __props__['dynamic_ip_required'] = dynamic_ip_required
            __props__['enable_ipv6'] = enable_ipv6
            if image is None:
                raise TypeError("Missing required property 'image'")
            __props__['image'] = image
            __props__['name'] = name
            __props__['public_ip'] = public_ip
            __props__['security_group'] = security_group
            __props__['state'] = state
            __props__['tags'] = tags
            if type is None:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
            __props__['volumes'] = volumes
            __props__['private_ip'] = None
            __props__['public_ipv6'] = None
            __props__['state_detail'] = None
        super(Server, __self__).__init__(
            'scaleway:index/server:Server',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, boot_type=None, bootscript=None, cloudinit=None, dynamic_ip_required=None, enable_ipv6=None, image=None, name=None, private_ip=None, public_ip=None, public_ipv6=None, security_group=None, state=None, state_detail=None, tags=None, type=None, volumes=None):
        """
        Get an existing Server resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] boot_type: The boot_type of the server
        :param pulumi.Input[str] bootscript: The boot configuration of the server
        :param pulumi.Input[str] cloudinit: the cloudinit script associated with this server
        :param pulumi.Input[bool] dynamic_ip_required: determines if a public IP address should be allocated for the server
        :param pulumi.Input[bool] enable_ipv6: determines if IPv6 is enabled for the server
        :param pulumi.Input[str] image: The base image of the server
        :param pulumi.Input[str] name: The name of the server
        :param pulumi.Input[str] private_ip: the Scaleway internal IP address of the server
        :param pulumi.Input[str] public_ip: the public IPv4 address of the server
        :param pulumi.Input[str] public_ipv6: the public IPv6 address of the server, if enabled
        :param pulumi.Input[str] security_group: The security group the server is attached to
        :param pulumi.Input[str] state: the server state (running, stopped)
        :param pulumi.Input[str] state_detail: scaleway description of the server state
        :param pulumi.Input[list] tags: The tags associated with the server
        :param pulumi.Input[str] type: The instance type of the server
        :param pulumi.Input[list] volumes: Volumes attached to the server on creation

        The **volumes** object supports the following:

          * `size_in_gb` (`pulumi.Input[float]`)
          * `type` (`pulumi.Input[str]`)
          * `volumeId` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["boot_type"] = boot_type
        __props__["bootscript"] = bootscript
        __props__["cloudinit"] = cloudinit
        __props__["dynamic_ip_required"] = dynamic_ip_required
        __props__["enable_ipv6"] = enable_ipv6
        __props__["image"] = image
        __props__["name"] = name
        __props__["private_ip"] = private_ip
        __props__["public_ip"] = public_ip
        __props__["public_ipv6"] = public_ipv6
        __props__["security_group"] = security_group
        __props__["state"] = state
        __props__["state_detail"] = state_detail
        __props__["tags"] = tags
        __props__["type"] = type
        __props__["volumes"] = volumes
        return Server(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
