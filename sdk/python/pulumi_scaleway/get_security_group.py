# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetSecurityGroupResult:
    """
    A collection of values returned by getSecurityGroup.
    """
    def __init__(__self__, description=None, enable_default_security=None, id=None, name=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        if enable_default_security and not isinstance(enable_default_security, bool):
            raise TypeError("Expected argument 'enable_default_security' to be a bool")
        __self__.enable_default_security = enable_default_security
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
class AwaitableGetSecurityGroupResult(GetSecurityGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecurityGroupResult(
            description=self.description,
            enable_default_security=self.enable_default_security,
            id=self.id,
            name=self.name)

def get_security_group(name=None,opts=None):
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()


    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('scaleway:index/getSecurityGroup:getSecurityGroup', __args__, opts=opts).value

    return AwaitableGetSecurityGroupResult(
        description=__ret__.get('description'),
        enable_default_security=__ret__.get('enableDefaultSecurity'),
        id=__ret__.get('id'),
        name=__ret__.get('name'))
