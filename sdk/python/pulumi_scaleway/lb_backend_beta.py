# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class LbBackendBeta(pulumi.CustomResource):
    forward_port: pulumi.Output[float]
    """
    User sessions will be forwarded to this port of backend servers
    """
    forward_port_algorithm: pulumi.Output[str]
    """
    Load balancing algorithm
    """
    forward_protocol: pulumi.Output[str]
    """
    Backend protocol
    """
    health_check_delay: pulumi.Output[str]
    """
    Interval between two HC requests
    """
    health_check_http: pulumi.Output[dict]
    health_check_https: pulumi.Output[dict]
    health_check_max_retries: pulumi.Output[float]
    """
    Number of allowed failed HC requests before the backend server is marked down
    """
    health_check_port: pulumi.Output[float]
    """
    Port the HC requests will be send to. Default to `forward_port`
    """
    health_check_tcp: pulumi.Output[dict]
    health_check_timeout: pulumi.Output[str]
    """
    Timeout before we consider a HC request failed
    """
    lb_id: pulumi.Output[str]
    """
    The load-balancer ID
    """
    name: pulumi.Output[str]
    """
    The name of the backend
    """
    on_marked_down_action: pulumi.Output[str]
    """
    Modify what occurs when a backend server is marked down
    """
    send_proxy_v2: pulumi.Output[bool]
    """
    Enables PROXY protocol version 2
    """
    server_ips: pulumi.Output[list]
    """
    Backend server IP addresses list (IPv4 or IPv6)
    """
    sticky_sessions: pulumi.Output[str]
    """
    Load balancing algorithm
    """
    sticky_sessions_cookie_name: pulumi.Output[str]
    """
    Cookie name for for sticky sessions
    """
    timeout_connect: pulumi.Output[str]
    """
    Maximum initial server connection establishment time
    """
    timeout_server: pulumi.Output[str]
    """
    Maximum server connection inactivity time
    """
    timeout_tunnel: pulumi.Output[str]
    """
    Maximum tunnel inactivity time
    """
    def __init__(__self__, resource_name, opts=None, forward_port=None, forward_port_algorithm=None, forward_protocol=None, health_check_delay=None, health_check_http=None, health_check_https=None, health_check_max_retries=None, health_check_port=None, health_check_tcp=None, health_check_timeout=None, lb_id=None, name=None, on_marked_down_action=None, send_proxy_v2=None, server_ips=None, sticky_sessions=None, sticky_sessions_cookie_name=None, timeout_connect=None, timeout_server=None, timeout_tunnel=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a LbBackendBeta resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] forward_port: User sessions will be forwarded to this port of backend servers
        :param pulumi.Input[str] forward_port_algorithm: Load balancing algorithm
        :param pulumi.Input[str] forward_protocol: Backend protocol
        :param pulumi.Input[str] health_check_delay: Interval between two HC requests
        :param pulumi.Input[float] health_check_max_retries: Number of allowed failed HC requests before the backend server is marked down
        :param pulumi.Input[float] health_check_port: Port the HC requests will be send to. Default to `forward_port`
        :param pulumi.Input[str] health_check_timeout: Timeout before we consider a HC request failed
        :param pulumi.Input[str] lb_id: The load-balancer ID
        :param pulumi.Input[str] name: The name of the backend
        :param pulumi.Input[str] on_marked_down_action: Modify what occurs when a backend server is marked down
        :param pulumi.Input[bool] send_proxy_v2: Enables PROXY protocol version 2
        :param pulumi.Input[list] server_ips: Backend server IP addresses list (IPv4 or IPv6)
        :param pulumi.Input[str] sticky_sessions: Load balancing algorithm
        :param pulumi.Input[str] sticky_sessions_cookie_name: Cookie name for for sticky sessions
        :param pulumi.Input[str] timeout_connect: Maximum initial server connection establishment time
        :param pulumi.Input[str] timeout_server: Maximum server connection inactivity time
        :param pulumi.Input[str] timeout_tunnel: Maximum tunnel inactivity time

        The **health_check_http** object supports the following:

          * `code` (`pulumi.Input[float]`)
          * `method` (`pulumi.Input[str]`)
          * `uri` (`pulumi.Input[str]`)

        The **health_check_https** object supports the following:

          * `code` (`pulumi.Input[float]`)
          * `method` (`pulumi.Input[str]`)
          * `uri` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if forward_port is None:
                raise TypeError("Missing required property 'forward_port'")
            __props__['forward_port'] = forward_port
            __props__['forward_port_algorithm'] = forward_port_algorithm
            if forward_protocol is None:
                raise TypeError("Missing required property 'forward_protocol'")
            __props__['forward_protocol'] = forward_protocol
            __props__['health_check_delay'] = health_check_delay
            __props__['health_check_http'] = health_check_http
            __props__['health_check_https'] = health_check_https
            __props__['health_check_max_retries'] = health_check_max_retries
            __props__['health_check_port'] = health_check_port
            __props__['health_check_tcp'] = health_check_tcp
            __props__['health_check_timeout'] = health_check_timeout
            if lb_id is None:
                raise TypeError("Missing required property 'lb_id'")
            __props__['lb_id'] = lb_id
            __props__['name'] = name
            __props__['on_marked_down_action'] = on_marked_down_action
            __props__['send_proxy_v2'] = send_proxy_v2
            __props__['server_ips'] = server_ips
            __props__['sticky_sessions'] = sticky_sessions
            __props__['sticky_sessions_cookie_name'] = sticky_sessions_cookie_name
            __props__['timeout_connect'] = timeout_connect
            __props__['timeout_server'] = timeout_server
            __props__['timeout_tunnel'] = timeout_tunnel
        super(LbBackendBeta, __self__).__init__(
            'scaleway:index/lbBackendBeta:LbBackendBeta',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, forward_port=None, forward_port_algorithm=None, forward_protocol=None, health_check_delay=None, health_check_http=None, health_check_https=None, health_check_max_retries=None, health_check_port=None, health_check_tcp=None, health_check_timeout=None, lb_id=None, name=None, on_marked_down_action=None, send_proxy_v2=None, server_ips=None, sticky_sessions=None, sticky_sessions_cookie_name=None, timeout_connect=None, timeout_server=None, timeout_tunnel=None):
        """
        Get an existing LbBackendBeta resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] forward_port: User sessions will be forwarded to this port of backend servers
        :param pulumi.Input[str] forward_port_algorithm: Load balancing algorithm
        :param pulumi.Input[str] forward_protocol: Backend protocol
        :param pulumi.Input[str] health_check_delay: Interval between two HC requests
        :param pulumi.Input[float] health_check_max_retries: Number of allowed failed HC requests before the backend server is marked down
        :param pulumi.Input[float] health_check_port: Port the HC requests will be send to. Default to `forward_port`
        :param pulumi.Input[str] health_check_timeout: Timeout before we consider a HC request failed
        :param pulumi.Input[str] lb_id: The load-balancer ID
        :param pulumi.Input[str] name: The name of the backend
        :param pulumi.Input[str] on_marked_down_action: Modify what occurs when a backend server is marked down
        :param pulumi.Input[bool] send_proxy_v2: Enables PROXY protocol version 2
        :param pulumi.Input[list] server_ips: Backend server IP addresses list (IPv4 or IPv6)
        :param pulumi.Input[str] sticky_sessions: Load balancing algorithm
        :param pulumi.Input[str] sticky_sessions_cookie_name: Cookie name for for sticky sessions
        :param pulumi.Input[str] timeout_connect: Maximum initial server connection establishment time
        :param pulumi.Input[str] timeout_server: Maximum server connection inactivity time
        :param pulumi.Input[str] timeout_tunnel: Maximum tunnel inactivity time

        The **health_check_http** object supports the following:

          * `code` (`pulumi.Input[float]`)
          * `method` (`pulumi.Input[str]`)
          * `uri` (`pulumi.Input[str]`)

        The **health_check_https** object supports the following:

          * `code` (`pulumi.Input[float]`)
          * `method` (`pulumi.Input[str]`)
          * `uri` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["forward_port"] = forward_port
        __props__["forward_port_algorithm"] = forward_port_algorithm
        __props__["forward_protocol"] = forward_protocol
        __props__["health_check_delay"] = health_check_delay
        __props__["health_check_http"] = health_check_http
        __props__["health_check_https"] = health_check_https
        __props__["health_check_max_retries"] = health_check_max_retries
        __props__["health_check_port"] = health_check_port
        __props__["health_check_tcp"] = health_check_tcp
        __props__["health_check_timeout"] = health_check_timeout
        __props__["lb_id"] = lb_id
        __props__["name"] = name
        __props__["on_marked_down_action"] = on_marked_down_action
        __props__["send_proxy_v2"] = send_proxy_v2
        __props__["server_ips"] = server_ips
        __props__["sticky_sessions"] = sticky_sessions
        __props__["sticky_sessions_cookie_name"] = sticky_sessions_cookie_name
        __props__["timeout_connect"] = timeout_connect
        __props__["timeout_server"] = timeout_server
        __props__["timeout_tunnel"] = timeout_tunnel
        return LbBackendBeta(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
