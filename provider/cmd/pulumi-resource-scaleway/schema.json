{
    "name": "scaleway",
    "description": "A Pulumi package for creating and managing scaleway cloud resources.",
    "keywords": [
        "pulumi",
        "scaleway"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`scaleway` Terraform Provider](https://github.com/scaleway/terraform-provider-scaleway).",
    "repository": "https://github.com/Kamaradeivanov/pulumi-scaleway",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "accessKey": {
                "type": "string",
                "description": "The Scaleway access key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_ACCESS_KEY"
                    ]
                }
            },
            "organization": {
                "type": "string",
                "deprecationMessage": "Use `organization_id` instead."
            },
            "organizationId": {
                "type": "string",
                "description": "The Scaleway organization ID.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_ORGANIZATION_ID"
                    ]
                }
            },
            "region": {
                "type": "string",
                "description": "The Scaleway default region to use for your resources.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_REGION"
                    ]
                }
            },
            "secretKey": {
                "type": "string",
                "description": "The Scaleway secret Key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_SECRET_KEY"
                    ]
                }
            },
            "token": {
                "type": "string",
                "deprecationMessage": "Use `secret_key` instead."
            },
            "zone": {
                "type": "string",
                "description": "The Scaleway default zone to use for your resources.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_ZONE"
                    ]
                }
            }
        }
    },
    "types": {
        "scaleway:/BaremetalServerIp:BaremetalServerIp": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reverse": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "id",
                        "reverse",
                        "version"
                    ]
                }
            }
        },
        "scaleway:/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:/InstanceServerRootVolume:InstanceServerRootVolume": {
            "properties": {
                "deleteOnTermination": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sizeInGb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "sizeInGb",
                        "volumeId"
                    ]
                }
            }
        },
        "scaleway:/InstanceServerUserData:InstanceServerUserData": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "scaleway:/K8SClusterBetaAutoUpgrade:K8SClusterBetaAutoUpgrade": {
            "properties": {
                "enable": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceWindowDay": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceWindowStartHour": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enable",
                "maintenanceWindowDay",
                "maintenanceWindowStartHour"
            ]
        },
        "scaleway:/K8SClusterBetaAutoscalerConfig:K8SClusterBetaAutoscalerConfig": {
            "properties": {
                "balanceSimilarNodeGroups": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableScaleDown": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "estimator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expander": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expendablePodsPriorityCutoff": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreDaemonsetsUtilization": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scaleDownDelayAfterAdd": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scaleDownUnneededTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "scaleway:/K8SClusterBetaDefaultPool:K8SClusterBetaDefaultPool": {
            "properties": {
                "autohealing": {
                    "type": "boolean",
                    "deprecationMessage": "This fields is deprecated and will be removed in the next major version, please use scaleway_k8s_pool_beta instead.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoscaling": {
                    "type": "boolean",
                    "deprecationMessage": "This fields is deprecated and will be removed in the next major version, please use scaleway_k8s_pool_beta instead.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "containerRuntime": {
                    "type": "string",
                    "deprecationMessage": "This fields is deprecated and will be removed in the next major version, please use scaleway_k8s_pool_beta instead.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSize": {
                    "type": "integer",
                    "deprecationMessage": "This fields is deprecated and will be removed in the next major version, please use scaleway_k8s_pool_beta instead.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minSize": {
                    "type": "integer",
                    "deprecationMessage": "This fields is deprecated and will be removed in the next major version, please use scaleway_k8s_pool_beta instead.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeType": {
                    "type": "string",
                    "deprecationMessage": "This fields is deprecated and will be removed in the next major version, please use scaleway_k8s_pool_beta instead.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:/K8SClusterBetaDefaultPoolNode:K8SClusterBetaDefaultPoolNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "placementGroupId": {
                    "type": "string",
                    "deprecationMessage": "This fields is deprecated and will be removed in the next major version, please use scaleway_k8s_pool_beta instead.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "poolId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "deprecationMessage": "This fields is deprecated and will be removed in the next major version, please use scaleway_k8s_pool_beta instead.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "deprecationMessage": "This fields is deprecated and will be removed in the next major version, please use scaleway_k8s_pool_beta instead.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waitForPoolReady": {
                    "type": "boolean",
                    "deprecationMessage": "This fields is deprecated and will be removed in the next major version, please use scaleway_k8s_pool_beta instead.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nodeType",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdAt",
                        "maxSize",
                        "minSize",
                        "nodeType",
                        "nodes",
                        "poolId",
                        "size",
                        "status",
                        "updatedAt"
                    ]
                }
            }
        },
        "scaleway:/K8SClusterBetaDefaultPoolNode:K8SClusterBetaDefaultPoolNode": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIpV6": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "publicIp",
                        "publicIpV6",
                        "status"
                    ]
                }
            }
        },
        "scaleway:/K8SClusterBetaKubeconfig:K8SClusterBetaKubeconfig": {
            "properties": {
                "clusterCaCertificate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configFile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterCaCertificate",
                        "configFile",
                        "host",
                        "token"
                    ]
                }
            }
        },
        "scaleway:/K8SPoolBetaNode:K8SPoolBetaNode": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIpV6": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "publicIp",
                        "publicIpV6",
                        "status"
                    ]
                }
            }
        },
        "scaleway:/LbBackendBetaHealthCheckHttp:LbBackendBetaHealthCheckHttp": {
            "properties": {
                "code": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "method": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uri"
            ]
        },
        "scaleway:/LbBackendBetaHealthCheckHttps:LbBackendBetaHealthCheckHttps": {
            "properties": {
                "code": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "method": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uri"
            ]
        },
        "scaleway:/LbBackendBetaHealthCheckTcp:LbBackendBetaHealthCheckTcp": {
            "type": "object"
        },
        "scaleway:/LbCertificateBetaCustomCertificate:LbCertificateBetaCustomCertificate": {
            "properties": {
                "certificateChain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificateChain"
            ]
        },
        "scaleway:/LbCertificateBetaLetsencrypt:LbCertificateBetaLetsencrypt": {
            "properties": {
                "commonName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subjectAlternativeNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "commonName"
            ]
        },
        "scaleway:/LbFrontendBetaAcl:LbFrontendBetaAcl": {
            "properties": {
                "action": {
                    "$ref": "#/types/scaleway:/LbFrontendBetaAclAction:LbFrontendBetaAclAction",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "match": {
                    "$ref": "#/types/scaleway:/LbFrontendBetaAclMatch:LbFrontendBetaAclMatch",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "match"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "match",
                        "name",
                        "organizationId",
                        "region"
                    ]
                }
            }
        },
        "scaleway:/LbFrontendBetaAclAction:LbFrontendBetaAclAction": {
            "properties": {
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "scaleway:/LbFrontendBetaAclMatch:LbFrontendBetaAclMatch": {
            "properties": {
                "httpFilter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpFilterValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "invert": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "scaleway:/RdbInstanceBetaReadReplica:RdbInstanceBetaReadReplica": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "name",
                        "port"
                    ]
                }
            }
        },
        "scaleway:/ServerVolume:ServerVolume": {
            "properties": {
                "sizeInGb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sizeInGb",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "sizeInGb",
                        "type",
                        "volumeId"
                    ]
                }
            }
        },
        "scaleway:/getBaremetalOfferCpus:getBaremetalOfferCpus": {
            "properties": {
                "coreCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "frequency": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "coreCount",
                "frequency",
                "name",
                "threadCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:/getBaremetalOfferDisk:getBaremetalOfferDisk": {
            "properties": {
                "capacity": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:/getBaremetalOfferMemory:getBaremetalOfferMemory": {
            "properties": {
                "capacity": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "frequency": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isEcc": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "frequency",
                "isEcc",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:/getInstanceSecurityGroupInboundRule:getInstanceSecurityGroupInboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "ip",
                "ipRange",
                "port",
                "portRange",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:/getInstanceSecurityGroupOutboundRule:getInstanceSecurityGroupOutboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "ip",
                "ipRange",
                "port",
                "portRange",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:/getInstanceServerRootVolume:getInstanceServerRootVolume": {
            "properties": {
                "deleteOnTermination": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sizeInGb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deleteOnTermination",
                "sizeInGb",
                "volumeId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:/getInstanceServerUserData:getInstanceServerUserData": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the scaleway package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "accessKey": {
                "type": "string",
                "description": "The Scaleway access key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_ACCESS_KEY"
                    ]
                }
            },
            "organization": {
                "type": "string",
                "deprecationMessage": "Use `organization_id` instead."
            },
            "organizationId": {
                "type": "string",
                "description": "The Scaleway organization ID.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_ORGANIZATION_ID"
                    ]
                }
            },
            "region": {
                "type": "string",
                "description": "The Scaleway default region to use for your resources.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_REGION"
                    ]
                }
            },
            "secretKey": {
                "type": "string",
                "description": "The Scaleway secret Key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_SECRET_KEY"
                    ]
                }
            },
            "token": {
                "type": "string",
                "deprecationMessage": "Use `secret_key` instead."
            },
            "zone": {
                "type": "string",
                "description": "The Scaleway default zone to use for your resources.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_ZONE"
                    ]
                }
            }
        }
    },
    "resources": {
        "scaleway:index/accountSSHKey:AccountSSHKey": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public SSH key\n"
                }
            },
            "required": [
                "name",
                "organizationId",
                "publicKey"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public SSH key\n"
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountSSHKey resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public SSH key\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/baremetalServer:BaremetalServer": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Some description to associate to the server, max 255 characters\n"
                },
                "domain": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the server\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:/BaremetalServerIp:BaremetalServerIp"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the server\n"
                },
                "offer": {
                    "type": "string",
                    "description": "ID of the server offer\n"
                },
                "offerId": {
                    "type": "string",
                    "description": "ID of the server offer\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "os": {
                    "type": "string",
                    "description": "The base image of the server\n"
                },
                "osId": {
                    "type": "string",
                    "description": "The base image id of the server\n"
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of SSH key IDs allowed to SSH to the server\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of tags to associate with the server\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "required": [
                "domain",
                "ips",
                "name",
                "offer",
                "offerId",
                "organizationId",
                "os",
                "osId",
                "sshKeyIds",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Some description to associate to the server, max 255 characters\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the server\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the server\n"
                },
                "offer": {
                    "type": "string",
                    "description": "ID of the server offer\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "os": {
                    "type": "string",
                    "description": "The base image of the server\n"
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of SSH key IDs allowed to SSH to the server\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of tags to associate with the server\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "requiredInputs": [
                "offer",
                "os",
                "sshKeyIds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BaremetalServer resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Some description to associate to the server, max 255 characters\n"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "Hostname of the server\n"
                    },
                    "ips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:/BaremetalServerIp:BaremetalServerIp"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the server\n"
                    },
                    "offer": {
                        "type": "string",
                        "description": "ID of the server offer\n"
                    },
                    "offerId": {
                        "type": "string",
                        "description": "ID of the server offer\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "os": {
                        "type": "string",
                        "description": "The base image of the server\n"
                    },
                    "osId": {
                        "type": "string",
                        "description": "The base image id of the server\n"
                    },
                    "sshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of SSH key IDs allowed to SSH to the server\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of tags to associate with the server\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone you want to attach the resource to\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iP:IP": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "The ipv4 address of the ip\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The ipv4 reverse dns\n",
                    "deprecationMessage": "use scaleway_ip_reverse_dns resource instead"
                },
                "server": {
                    "type": "string",
                    "description": "The server associated with the ip\n"
                }
            },
            "required": [
                "ip",
                "reverse",
                "server"
            ],
            "inputProperties": {
                "reverse": {
                    "type": "string",
                    "description": "The ipv4 reverse dns\n",
                    "deprecationMessage": "use scaleway_ip_reverse_dns resource instead"
                },
                "server": {
                    "type": "string",
                    "description": "The server associated with the ip\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IP resources.\n",
                "properties": {
                    "ip": {
                        "type": "string",
                        "description": "The ipv4 address of the ip\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The ipv4 reverse dns\n",
                        "deprecationMessage": "use scaleway_ip_reverse_dns resource instead"
                    },
                    "server": {
                        "type": "string",
                        "description": "The server associated with the ip\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iPReverseDNS:IPReverseDNS": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "The ipv4 address of the ip, or IP ID\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The ipv4 reverse dns\n"
                }
            },
            "required": [
                "ip",
                "reverse"
            ],
            "inputProperties": {
                "ip": {
                    "type": "string",
                    "description": "The ipv4 address of the ip, or IP ID\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The ipv4 reverse dns\n"
                }
            },
            "requiredInputs": [
                "ip",
                "reverse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IPReverseDNS resources.\n",
                "properties": {
                    "ip": {
                        "type": "string",
                        "description": "The ipv4 address of the ip, or IP ID\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The ipv4 reverse dns\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceIP:InstanceIP": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP address\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse DNS for this IP\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "required": [
                "address",
                "organizationId",
                "reverse",
                "zone"
            ],
            "inputProperties": {
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceIP resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse DNS for this IP\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone you want to attach the resource to\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceIPReverseDns:InstanceIPReverseDns": {
            "properties": {
                "ipId": {
                    "type": "string",
                    "description": "The IP ID or IP address\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse DNS for this IP\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "required": [
                "ipId",
                "reverse",
                "zone"
            ],
            "inputProperties": {
                "ipId": {
                    "type": "string",
                    "description": "The IP ID or IP address\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse DNS for this IP\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "requiredInputs": [
                "ipId",
                "reverse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceIPReverseDns resources.\n",
                "properties": {
                    "ipId": {
                        "type": "string",
                        "description": "The IP ID or IP address\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse DNS for this IP\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone you want to attach the resource to\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instancePlacementGroup:InstancePlacementGroup": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the placement group\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "policyMode": {
                    "type": "string",
                    "description": "One of the two policy_mode may be selected: enforced or optional.\n"
                },
                "policyRespected": {
                    "type": "boolean",
                    "description": "Is true when the policy is respected.\n"
                },
                "policyType": {
                    "type": "string",
                    "description": "The operating mode is selected by a policy_type\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "required": [
                "name",
                "organizationId",
                "policyRespected",
                "zone"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the placement group\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "policyMode": {
                    "type": "string",
                    "description": "One of the two policy_mode may be selected: enforced or optional.\n"
                },
                "policyType": {
                    "type": "string",
                    "description": "The operating mode is selected by a policy_type\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstancePlacementGroup resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the placement group\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "policyMode": {
                        "type": "string",
                        "description": "One of the two policy_mode may be selected: enforced or optional.\n"
                    },
                    "policyRespected": {
                        "type": "boolean",
                        "description": "Is true when the policy is respected.\n"
                    },
                    "policyType": {
                        "type": "string",
                        "description": "The operating mode is selected by a policy_type\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone you want to attach the resource to\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceSecurityGroup:InstanceSecurityGroup": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the security group\n"
                },
                "externalRules": {
                    "type": "boolean"
                },
                "inboundDefaultPolicy": {
                    "type": "string",
                    "description": "Default inbound traffic policy for this security group\n"
                },
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule"
                    },
                    "description": "Inbound rules for this security group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "outboundDefaultPolicy": {
                    "type": "string",
                    "description": "Default outbound traffic policy for this security group\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule"
                    },
                    "description": "Outbound rules for this security group\n"
                },
                "stateful": {
                    "type": "boolean",
                    "description": "The stateful value of the security group\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "required": [
                "name",
                "organizationId",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the security group\n"
                },
                "externalRules": {
                    "type": "boolean"
                },
                "inboundDefaultPolicy": {
                    "type": "string",
                    "description": "Default inbound traffic policy for this security group\n"
                },
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule"
                    },
                    "description": "Inbound rules for this security group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "outboundDefaultPolicy": {
                    "type": "string",
                    "description": "Default outbound traffic policy for this security group\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule"
                    },
                    "description": "Outbound rules for this security group\n"
                },
                "stateful": {
                    "type": "boolean",
                    "description": "The stateful value of the security group\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceSecurityGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the security group\n"
                    },
                    "externalRules": {
                        "type": "boolean"
                    },
                    "inboundDefaultPolicy": {
                        "type": "string",
                        "description": "Default inbound traffic policy for this security group\n"
                    },
                    "inboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule"
                        },
                        "description": "Inbound rules for this security group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the security group\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "outboundDefaultPolicy": {
                        "type": "string",
                        "description": "Default outbound traffic policy for this security group\n"
                    },
                    "outboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule"
                        },
                        "description": "Outbound rules for this security group\n"
                    },
                    "stateful": {
                        "type": "boolean",
                        "description": "The stateful value of the security group\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone you want to attach the resource to\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceSecurityGroupRules:InstanceSecurityGroupRules": {
            "properties": {
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule"
                    },
                    "description": "Inbound rules for this set of security group rules\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule"
                    },
                    "description": "Outbound rules for this set of security group rules\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The security group associated with this volume\n"
                }
            },
            "required": [
                "securityGroupId"
            ],
            "inputProperties": {
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule"
                    },
                    "description": "Inbound rules for this set of security group rules\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule"
                    },
                    "description": "Outbound rules for this set of security group rules\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The security group associated with this volume\n"
                }
            },
            "requiredInputs": [
                "securityGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceSecurityGroupRules resources.\n",
                "properties": {
                    "inboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule"
                        },
                        "description": "Inbound rules for this set of security group rules\n"
                    },
                    "outboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule"
                        },
                        "description": "Outbound rules for this set of security group rules\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The security group associated with this volume\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceServer:InstanceServer": {
            "properties": {
                "additionalVolumeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The additional volumes attached to the server\n"
                },
                "bootType": {
                    "type": "string",
                    "description": "The boot type of the server\n"
                },
                "cloudInit": {
                    "type": "string",
                    "description": "The cloud init script associated with this server\n"
                },
                "enableDynamicIp": {
                    "type": "boolean",
                    "description": "Enable dynamic IP on the server\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Determines if IPv6 is enabled for the server\n"
                },
                "image": {
                    "type": "string",
                    "description": "The UUID or the label of the base image used by the server\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "The ID of the reserved IP for the server\n"
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "The default public IPv6 address routed to the server.\n"
                },
                "ipv6Gateway": {
                    "type": "string",
                    "description": "The IPv6 gateway address\n"
                },
                "ipv6PrefixLength": {
                    "type": "integer",
                    "description": "The IPv6 prefix length routed to the server.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The placement group the server is attached to\n"
                },
                "placementGroupPolicyRespected": {
                    "type": "boolean",
                    "description": "True when the placement group policy is respected\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The Scaleway internal IP address of the server\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IPv4 address of the server\n"
                },
                "rootVolume": {
                    "$ref": "#/types/scaleway:/InstanceServerRootVolume:InstanceServerRootVolume",
                    "description": "Root volume attached to the server on creation\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The security group the server is attached to\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the server should be: started, stopped, standby\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server\n"
                },
                "type": {
                    "type": "string",
                    "description": "The instance type of the server\n"
                },
                "userDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:/InstanceServerUserData:InstanceServerUserData"
                    },
                    "description": "The user data associated with the server\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "required": [
                "bootType",
                "image",
                "ipv6Address",
                "ipv6Gateway",
                "ipv6PrefixLength",
                "name",
                "organizationId",
                "placementGroupPolicyRespected",
                "privateIp",
                "publicIp",
                "rootVolume",
                "securityGroupId",
                "type",
                "zone"
            ],
            "inputProperties": {
                "additionalVolumeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The additional volumes attached to the server\n"
                },
                "cloudInit": {
                    "type": "string",
                    "description": "The cloud init script associated with this server\n"
                },
                "enableDynamicIp": {
                    "type": "boolean",
                    "description": "Enable dynamic IP on the server\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Determines if IPv6 is enabled for the server\n"
                },
                "image": {
                    "type": "string",
                    "description": "The UUID or the label of the base image used by the server\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "The ID of the reserved IP for the server\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The placement group the server is attached to\n"
                },
                "rootVolume": {
                    "$ref": "#/types/scaleway:/InstanceServerRootVolume:InstanceServerRootVolume",
                    "description": "Root volume attached to the server on creation\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The security group the server is attached to\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the server should be: started, stopped, standby\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server\n"
                },
                "type": {
                    "type": "string",
                    "description": "The instance type of the server\n"
                },
                "userDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:/InstanceServerUserData:InstanceServerUserData"
                    },
                    "description": "The user data associated with the server\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "requiredInputs": [
                "image",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceServer resources.\n",
                "properties": {
                    "additionalVolumeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The additional volumes attached to the server\n"
                    },
                    "bootType": {
                        "type": "string",
                        "description": "The boot type of the server\n"
                    },
                    "cloudInit": {
                        "type": "string",
                        "description": "The cloud init script associated with this server\n"
                    },
                    "enableDynamicIp": {
                        "type": "boolean",
                        "description": "Enable dynamic IP on the server\n"
                    },
                    "enableIpv6": {
                        "type": "boolean",
                        "description": "Determines if IPv6 is enabled for the server\n"
                    },
                    "image": {
                        "type": "string",
                        "description": "The UUID or the label of the base image used by the server\n"
                    },
                    "ipId": {
                        "type": "string",
                        "description": "The ID of the reserved IP for the server\n"
                    },
                    "ipv6Address": {
                        "type": "string",
                        "description": "The default public IPv6 address routed to the server.\n"
                    },
                    "ipv6Gateway": {
                        "type": "string",
                        "description": "The IPv6 gateway address\n"
                    },
                    "ipv6PrefixLength": {
                        "type": "integer",
                        "description": "The IPv6 prefix length routed to the server.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "placementGroupId": {
                        "type": "string",
                        "description": "The placement group the server is attached to\n"
                    },
                    "placementGroupPolicyRespected": {
                        "type": "boolean",
                        "description": "True when the placement group policy is respected\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The Scaleway internal IP address of the server\n"
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "The public IPv4 address of the server\n"
                    },
                    "rootVolume": {
                        "$ref": "#/types/scaleway:/InstanceServerRootVolume:InstanceServerRootVolume",
                        "description": "Root volume attached to the server on creation\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The security group the server is attached to\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the server should be: started, stopped, standby\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the server\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The instance type of the server\n"
                    },
                    "userDatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:/InstanceServerUserData:InstanceServerUserData"
                        },
                        "description": "The user data associated with the server\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone you want to attach the resource to\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceVolume:InstanceVolume": {
            "properties": {
                "fromSnapshotId": {
                    "type": "string",
                    "description": "Create a volume based on a image\n"
                },
                "fromVolumeId": {
                    "type": "string",
                    "description": "Create a copy of an existing volume\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the volume\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The server associated with this volume\n"
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "The size of the volume in gigabyte\n"
                },
                "type": {
                    "type": "string",
                    "description": "The volume type\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "required": [
                "name",
                "organizationId",
                "serverId",
                "sizeInGb",
                "type",
                "zone"
            ],
            "inputProperties": {
                "fromSnapshotId": {
                    "type": "string",
                    "description": "Create a volume based on a image\n"
                },
                "fromVolumeId": {
                    "type": "string",
                    "description": "Create a copy of an existing volume\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the volume\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "The size of the volume in gigabyte\n"
                },
                "type": {
                    "type": "string",
                    "description": "The volume type\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceVolume resources.\n",
                "properties": {
                    "fromSnapshotId": {
                        "type": "string",
                        "description": "Create a volume based on a image\n"
                    },
                    "fromVolumeId": {
                        "type": "string",
                        "description": "Create a copy of an existing volume\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the volume\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server associated with this volume\n"
                    },
                    "sizeInGb": {
                        "type": "integer",
                        "description": "The size of the volume in gigabyte\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The volume type\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone you want to attach the resource to\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/k8SClusterBeta:K8SClusterBeta": {
            "properties": {
                "admissionPlugins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of admission plugins to enable on the cluster\n"
                },
                "apiserverUrl": {
                    "type": "string",
                    "description": "Kubernetes API server URL\n"
                },
                "autoUpgrade": {
                    "$ref": "#/types/scaleway:/K8SClusterBetaAutoUpgrade:K8SClusterBetaAutoUpgrade",
                    "description": "The auto upgrade configuration for the cluster\n"
                },
                "autoscalerConfig": {
                    "$ref": "#/types/scaleway:/K8SClusterBetaAutoscalerConfig:K8SClusterBetaAutoscalerConfig",
                    "description": "The autoscaler configuration for the cluster\n"
                },
                "cni": {
                    "type": "string",
                    "description": "The CNI plugin of the cluster\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the Kubernetes cluster\n"
                },
                "defaultPool": {
                    "$ref": "#/types/scaleway:/K8SClusterBetaDefaultPool:K8SClusterBetaDefaultPool",
                    "description": "Default pool created for the cluster on creation\n",
                    "deprecationMessage": "This fields is deprecated and will be removed in the next major version, please use scaleway_k8s_pool_beta instead."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cluster\n"
                },
                "enableDashboard": {
                    "type": "boolean",
                    "description": "Enable the dashboard on the cluster\n"
                },
                "featureGates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of feature gates to enable on the cluster\n"
                },
                "ingress": {
                    "type": "string",
                    "description": "The ingress to be deployed on the cluster\n"
                },
                "kubeconfig": {
                    "$ref": "#/types/scaleway:/K8SClusterBetaKubeconfig:K8SClusterBetaKubeconfig",
                    "description": "The kubeconfig configuration file of the Kubernetes cluster\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the cluster\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the cluster\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the Kubernetes cluster\n"
                },
                "upgradeAvailable": {
                    "type": "boolean",
                    "description": "True if an upgrade is available\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the cluster\n"
                },
                "wildcardDns": {
                    "type": "string",
                    "description": "Wildcard DNS pointing to all the ready nodes\n"
                }
            },
            "required": [
                "apiserverUrl",
                "autoUpgrade",
                "autoscalerConfig",
                "cni",
                "createdAt",
                "kubeconfig",
                "name",
                "organizationId",
                "region",
                "status",
                "updatedAt",
                "upgradeAvailable",
                "version",
                "wildcardDns"
            ],
            "inputProperties": {
                "admissionPlugins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of admission plugins to enable on the cluster\n"
                },
                "autoUpgrade": {
                    "$ref": "#/types/scaleway:/K8SClusterBetaAutoUpgrade:K8SClusterBetaAutoUpgrade",
                    "description": "The auto upgrade configuration for the cluster\n"
                },
                "autoscalerConfig": {
                    "$ref": "#/types/scaleway:/K8SClusterBetaAutoscalerConfig:K8SClusterBetaAutoscalerConfig",
                    "description": "The autoscaler configuration for the cluster\n"
                },
                "cni": {
                    "type": "string",
                    "description": "The CNI plugin of the cluster\n"
                },
                "defaultPool": {
                    "$ref": "#/types/scaleway:/K8SClusterBetaDefaultPool:K8SClusterBetaDefaultPool",
                    "description": "Default pool created for the cluster on creation\n",
                    "deprecationMessage": "This fields is deprecated and will be removed in the next major version, please use scaleway_k8s_pool_beta instead."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cluster\n"
                },
                "enableDashboard": {
                    "type": "boolean",
                    "description": "Enable the dashboard on the cluster\n"
                },
                "featureGates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of feature gates to enable on the cluster\n"
                },
                "ingress": {
                    "type": "string",
                    "description": "The ingress to be deployed on the cluster\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the cluster\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the cluster\n"
                }
            },
            "requiredInputs": [
                "cni",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8SClusterBeta resources.\n",
                "properties": {
                    "admissionPlugins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of admission plugins to enable on the cluster\n"
                    },
                    "apiserverUrl": {
                        "type": "string",
                        "description": "Kubernetes API server URL\n"
                    },
                    "autoUpgrade": {
                        "$ref": "#/types/scaleway:/K8SClusterBetaAutoUpgrade:K8SClusterBetaAutoUpgrade",
                        "description": "The auto upgrade configuration for the cluster\n"
                    },
                    "autoscalerConfig": {
                        "$ref": "#/types/scaleway:/K8SClusterBetaAutoscalerConfig:K8SClusterBetaAutoscalerConfig",
                        "description": "The autoscaler configuration for the cluster\n"
                    },
                    "cni": {
                        "type": "string",
                        "description": "The CNI plugin of the cluster\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the Kubernetes cluster\n"
                    },
                    "defaultPool": {
                        "$ref": "#/types/scaleway:/K8SClusterBetaDefaultPool:K8SClusterBetaDefaultPool",
                        "description": "Default pool created for the cluster on creation\n",
                        "deprecationMessage": "This fields is deprecated and will be removed in the next major version, please use scaleway_k8s_pool_beta instead."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the cluster\n"
                    },
                    "enableDashboard": {
                        "type": "boolean",
                        "description": "Enable the dashboard on the cluster\n"
                    },
                    "featureGates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of feature gates to enable on the cluster\n"
                    },
                    "ingress": {
                        "type": "string",
                        "description": "The ingress to be deployed on the cluster\n"
                    },
                    "kubeconfig": {
                        "$ref": "#/types/scaleway:/K8SClusterBetaKubeconfig:K8SClusterBetaKubeconfig",
                        "description": "The kubeconfig configuration file of the Kubernetes cluster\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cluster\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the cluster\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the cluster\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the Kubernetes cluster\n"
                    },
                    "upgradeAvailable": {
                        "type": "boolean",
                        "description": "True if an upgrade is available\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the cluster\n"
                    },
                    "wildcardDns": {
                        "type": "string",
                        "description": "Wildcard DNS pointing to all the ready nodes\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/k8SPoolBeta:K8SPoolBeta": {
            "properties": {
                "autohealing": {
                    "type": "boolean",
                    "description": "Enable the autohealing on the pool\n"
                },
                "autoscaling": {
                    "type": "boolean",
                    "description": "Enable the autoscaling on the pool\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the cluster on which this pool will be created\n"
                },
                "containerRuntime": {
                    "type": "string",
                    "description": "Container runtime for the pool\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the pool\n"
                },
                "currentSize": {
                    "type": "integer",
                    "description": "The actual size of the pool\n"
                },
                "maxSize": {
                    "type": "integer",
                    "description": "Maximum size of the pool\n"
                },
                "minSize": {
                    "type": "integer",
                    "description": "Minimun size of the pool\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "Server type of the pool servers\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:/K8SPoolBetaNode:K8SPoolBetaNode"
                    }
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "ID of the placement group\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size of the pool\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the pool\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the pool\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the pool\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes version of the pool\n"
                },
                "waitForPoolReady": {
                    "type": "boolean",
                    "description": "Whether to wait for the pool to be ready\n"
                }
            },
            "required": [
                "clusterId",
                "createdAt",
                "currentSize",
                "maxSize",
                "name",
                "nodeType",
                "nodes",
                "region",
                "size",
                "status",
                "updatedAt",
                "version"
            ],
            "inputProperties": {
                "autohealing": {
                    "type": "boolean",
                    "description": "Enable the autohealing on the pool\n"
                },
                "autoscaling": {
                    "type": "boolean",
                    "description": "Enable the autoscaling on the pool\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the cluster on which this pool will be created\n"
                },
                "containerRuntime": {
                    "type": "string",
                    "description": "Container runtime for the pool\n"
                },
                "maxSize": {
                    "type": "integer",
                    "description": "Maximum size of the pool\n"
                },
                "minSize": {
                    "type": "integer",
                    "description": "Minimun size of the pool\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "Server type of the pool servers\n"
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "ID of the placement group\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size of the pool\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the pool\n"
                },
                "waitForPoolReady": {
                    "type": "boolean",
                    "description": "Whether to wait for the pool to be ready\n"
                }
            },
            "requiredInputs": [
                "clusterId",
                "nodeType",
                "size"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8SPoolBeta resources.\n",
                "properties": {
                    "autohealing": {
                        "type": "boolean",
                        "description": "Enable the autohealing on the pool\n"
                    },
                    "autoscaling": {
                        "type": "boolean",
                        "description": "Enable the autoscaling on the pool\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the cluster on which this pool will be created\n"
                    },
                    "containerRuntime": {
                        "type": "string",
                        "description": "Container runtime for the pool\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the pool\n"
                    },
                    "currentSize": {
                        "type": "integer",
                        "description": "The actual size of the pool\n"
                    },
                    "maxSize": {
                        "type": "integer",
                        "description": "Maximum size of the pool\n"
                    },
                    "minSize": {
                        "type": "integer",
                        "description": "Minimun size of the pool\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cluster\n"
                    },
                    "nodeType": {
                        "type": "string",
                        "description": "Server type of the pool servers\n"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:/K8SPoolBetaNode:K8SPoolBetaNode"
                        }
                    },
                    "placementGroupId": {
                        "type": "string",
                        "description": "ID of the placement group\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size of the pool\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the pool\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the pool\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the pool\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The Kubernetes version of the pool\n"
                    },
                    "waitForPoolReady": {
                        "type": "boolean",
                        "description": "Whether to wait for the pool to be ready\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/lbBackendBeta:LbBackendBeta": {
            "properties": {
                "forwardPort": {
                    "type": "integer",
                    "description": "User sessions will be forwarded to this port of backend servers\n"
                },
                "forwardPortAlgorithm": {
                    "type": "string",
                    "description": "Load balancing algorithm\n"
                },
                "forwardProtocol": {
                    "type": "string",
                    "description": "Backend protocol\n"
                },
                "healthCheckDelay": {
                    "type": "string",
                    "description": "Interval between two HC requests\n"
                },
                "healthCheckHttp": {
                    "$ref": "#/types/scaleway:/LbBackendBetaHealthCheckHttp:LbBackendBetaHealthCheckHttp"
                },
                "healthCheckHttps": {
                    "$ref": "#/types/scaleway:/LbBackendBetaHealthCheckHttps:LbBackendBetaHealthCheckHttps"
                },
                "healthCheckMaxRetries": {
                    "type": "integer",
                    "description": "Number of allowed failed HC requests before the backend server is marked down\n"
                },
                "healthCheckPort": {
                    "type": "integer",
                    "description": "Port the HC requests will be send to. Default to `forward_port`\n"
                },
                "healthCheckTcp": {
                    "$ref": "#/types/scaleway:/LbBackendBetaHealthCheckTcp:LbBackendBetaHealthCheckTcp"
                },
                "healthCheckTimeout": {
                    "type": "string",
                    "description": "Timeout before we consider a HC request failed\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the backend\n"
                },
                "onMarkedDownAction": {
                    "type": "string",
                    "description": "Modify what occurs when a backend server is marked down\n"
                },
                "sendProxyV2": {
                    "type": "boolean",
                    "description": "Enables PROXY protocol version 2\n"
                },
                "serverIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Backend server IP addresses list (IPv4 or IPv6)\n"
                },
                "stickySessions": {
                    "type": "string",
                    "description": "Load balancing algorithm\n"
                },
                "stickySessionsCookieName": {
                    "type": "string",
                    "description": "Cookie name for for sticky sessions\n"
                },
                "timeoutConnect": {
                    "type": "string",
                    "description": "Maximum initial server connection establishment time\n"
                },
                "timeoutServer": {
                    "type": "string",
                    "description": "Maximum server connection inactivity time\n"
                },
                "timeoutTunnel": {
                    "type": "string",
                    "description": "Maximum tunnel inactivity time\n"
                }
            },
            "required": [
                "forwardPort",
                "forwardProtocol",
                "healthCheckPort",
                "healthCheckTcp",
                "lbId",
                "name"
            ],
            "inputProperties": {
                "forwardPort": {
                    "type": "integer",
                    "description": "User sessions will be forwarded to this port of backend servers\n"
                },
                "forwardPortAlgorithm": {
                    "type": "string",
                    "description": "Load balancing algorithm\n"
                },
                "forwardProtocol": {
                    "type": "string",
                    "description": "Backend protocol\n"
                },
                "healthCheckDelay": {
                    "type": "string",
                    "description": "Interval between two HC requests\n"
                },
                "healthCheckHttp": {
                    "$ref": "#/types/scaleway:/LbBackendBetaHealthCheckHttp:LbBackendBetaHealthCheckHttp"
                },
                "healthCheckHttps": {
                    "$ref": "#/types/scaleway:/LbBackendBetaHealthCheckHttps:LbBackendBetaHealthCheckHttps"
                },
                "healthCheckMaxRetries": {
                    "type": "integer",
                    "description": "Number of allowed failed HC requests before the backend server is marked down\n"
                },
                "healthCheckPort": {
                    "type": "integer",
                    "description": "Port the HC requests will be send to. Default to `forward_port`\n"
                },
                "healthCheckTcp": {
                    "$ref": "#/types/scaleway:/LbBackendBetaHealthCheckTcp:LbBackendBetaHealthCheckTcp"
                },
                "healthCheckTimeout": {
                    "type": "string",
                    "description": "Timeout before we consider a HC request failed\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the backend\n"
                },
                "onMarkedDownAction": {
                    "type": "string",
                    "description": "Modify what occurs when a backend server is marked down\n"
                },
                "sendProxyV2": {
                    "type": "boolean",
                    "description": "Enables PROXY protocol version 2\n"
                },
                "serverIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Backend server IP addresses list (IPv4 or IPv6)\n"
                },
                "stickySessions": {
                    "type": "string",
                    "description": "Load balancing algorithm\n"
                },
                "stickySessionsCookieName": {
                    "type": "string",
                    "description": "Cookie name for for sticky sessions\n"
                },
                "timeoutConnect": {
                    "type": "string",
                    "description": "Maximum initial server connection establishment time\n"
                },
                "timeoutServer": {
                    "type": "string",
                    "description": "Maximum server connection inactivity time\n"
                },
                "timeoutTunnel": {
                    "type": "string",
                    "description": "Maximum tunnel inactivity time\n"
                }
            },
            "requiredInputs": [
                "forwardPort",
                "forwardProtocol",
                "lbId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbBackendBeta resources.\n",
                "properties": {
                    "forwardPort": {
                        "type": "integer",
                        "description": "User sessions will be forwarded to this port of backend servers\n"
                    },
                    "forwardPortAlgorithm": {
                        "type": "string",
                        "description": "Load balancing algorithm\n"
                    },
                    "forwardProtocol": {
                        "type": "string",
                        "description": "Backend protocol\n"
                    },
                    "healthCheckDelay": {
                        "type": "string",
                        "description": "Interval between two HC requests\n"
                    },
                    "healthCheckHttp": {
                        "$ref": "#/types/scaleway:/LbBackendBetaHealthCheckHttp:LbBackendBetaHealthCheckHttp"
                    },
                    "healthCheckHttps": {
                        "$ref": "#/types/scaleway:/LbBackendBetaHealthCheckHttps:LbBackendBetaHealthCheckHttps"
                    },
                    "healthCheckMaxRetries": {
                        "type": "integer",
                        "description": "Number of allowed failed HC requests before the backend server is marked down\n"
                    },
                    "healthCheckPort": {
                        "type": "integer",
                        "description": "Port the HC requests will be send to. Default to `forward_port`\n"
                    },
                    "healthCheckTcp": {
                        "$ref": "#/types/scaleway:/LbBackendBetaHealthCheckTcp:LbBackendBetaHealthCheckTcp"
                    },
                    "healthCheckTimeout": {
                        "type": "string",
                        "description": "Timeout before we consider a HC request failed\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the backend\n"
                    },
                    "onMarkedDownAction": {
                        "type": "string",
                        "description": "Modify what occurs when a backend server is marked down\n"
                    },
                    "sendProxyV2": {
                        "type": "boolean",
                        "description": "Enables PROXY protocol version 2\n"
                    },
                    "serverIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Backend server IP addresses list (IPv4 or IPv6)\n"
                    },
                    "stickySessions": {
                        "type": "string",
                        "description": "Load balancing algorithm\n"
                    },
                    "stickySessionsCookieName": {
                        "type": "string",
                        "description": "Cookie name for for sticky sessions\n"
                    },
                    "timeoutConnect": {
                        "type": "string",
                        "description": "Maximum initial server connection establishment time\n"
                    },
                    "timeoutServer": {
                        "type": "string",
                        "description": "Maximum server connection inactivity time\n"
                    },
                    "timeoutTunnel": {
                        "type": "string",
                        "description": "Maximum tunnel inactivity time\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/lbBeta:LbBeta": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "The load-balance public IP address\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "The load-balance public IP ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the lb\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of tags to associate with the load-balancer\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of load-balancer you want to create\n"
                }
            },
            "required": [
                "ipAddress",
                "ipId",
                "name",
                "organizationId",
                "region",
                "type"
            ],
            "inputProperties": {
                "ipId": {
                    "type": "string",
                    "description": "The load-balance public IP ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the lb\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of tags to associate with the load-balancer\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of load-balancer you want to create\n"
                }
            },
            "requiredInputs": [
                "ipId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbBeta resources.\n",
                "properties": {
                    "ipAddress": {
                        "type": "string",
                        "description": "The load-balance public IP address\n"
                    },
                    "ipId": {
                        "type": "string",
                        "description": "The load-balance public IP ID\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the lb\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of tags to associate with the load-balancer\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of load-balancer you want to create\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/lbCertificateBeta:LbCertificateBeta": {
            "properties": {
                "commonName": {
                    "type": "string",
                    "description": "The main domain name of the certificate\n"
                },
                "customCertificate": {
                    "$ref": "#/types/scaleway:/LbCertificateBetaCustomCertificate:LbCertificateBetaCustomCertificate",
                    "description": "The custom type certificate type configuration\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The identifier (SHA-1) of the certificate\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID\n"
                },
                "letsencrypt": {
                    "$ref": "#/types/scaleway:/LbCertificateBetaLetsencrypt:LbCertificateBetaLetsencrypt",
                    "description": "The Let's Encrypt type certificate configuration\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the load-balancer certificate\n"
                },
                "notValidAfter": {
                    "type": "string",
                    "description": "The not valid after validity bound timestamp\n"
                },
                "notValidBefore": {
                    "type": "string",
                    "description": "The not valid before validity bound timestamp\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of certificate\n"
                },
                "subjectAlternativeName": {
                    "type": "string",
                    "description": "The alternative domain names of the certificate\n"
                }
            },
            "required": [
                "commonName",
                "fingerprint",
                "lbId",
                "name",
                "notValidAfter",
                "notValidBefore",
                "status",
                "subjectAlternativeName"
            ],
            "inputProperties": {
                "customCertificate": {
                    "$ref": "#/types/scaleway:/LbCertificateBetaCustomCertificate:LbCertificateBetaCustomCertificate",
                    "description": "The custom type certificate type configuration\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID\n"
                },
                "letsencrypt": {
                    "$ref": "#/types/scaleway:/LbCertificateBetaLetsencrypt:LbCertificateBetaLetsencrypt",
                    "description": "The Let's Encrypt type certificate configuration\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the load-balancer certificate\n"
                }
            },
            "requiredInputs": [
                "lbId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbCertificateBeta resources.\n",
                "properties": {
                    "commonName": {
                        "type": "string",
                        "description": "The main domain name of the certificate\n"
                    },
                    "customCertificate": {
                        "$ref": "#/types/scaleway:/LbCertificateBetaCustomCertificate:LbCertificateBetaCustomCertificate",
                        "description": "The custom type certificate type configuration\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The identifier (SHA-1) of the certificate\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID\n"
                    },
                    "letsencrypt": {
                        "$ref": "#/types/scaleway:/LbCertificateBetaLetsencrypt:LbCertificateBetaLetsencrypt",
                        "description": "The Let's Encrypt type certificate configuration\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the load-balancer certificate\n"
                    },
                    "notValidAfter": {
                        "type": "string",
                        "description": "The not valid after validity bound timestamp\n"
                    },
                    "notValidBefore": {
                        "type": "string",
                        "description": "The not valid before validity bound timestamp\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of certificate\n"
                    },
                    "subjectAlternativeName": {
                        "type": "string",
                        "description": "The alternative domain names of the certificate\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/lbFrontendBeta:LbFrontendBeta": {
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:/LbFrontendBetaAcl:LbFrontendBetaAcl"
                    },
                    "description": "ACL rules\n"
                },
                "backendId": {
                    "type": "string",
                    "description": "The load-balancer backend ID\n"
                },
                "certificateId": {
                    "type": "string",
                    "description": "Certificate ID\n"
                },
                "inboundPort": {
                    "type": "integer",
                    "description": "TCP port to listen on the front side\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the frontend\n"
                },
                "timeoutClient": {
                    "type": "string",
                    "description": "Set the maximum inactivity time on the client side\n"
                }
            },
            "required": [
                "backendId",
                "inboundPort",
                "lbId",
                "name"
            ],
            "inputProperties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:/LbFrontendBetaAcl:LbFrontendBetaAcl"
                    },
                    "description": "ACL rules\n"
                },
                "backendId": {
                    "type": "string",
                    "description": "The load-balancer backend ID\n"
                },
                "certificateId": {
                    "type": "string",
                    "description": "Certificate ID\n"
                },
                "inboundPort": {
                    "type": "integer",
                    "description": "TCP port to listen on the front side\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the frontend\n"
                },
                "timeoutClient": {
                    "type": "string",
                    "description": "Set the maximum inactivity time on the client side\n"
                }
            },
            "requiredInputs": [
                "backendId",
                "inboundPort",
                "lbId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbFrontendBeta resources.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:/LbFrontendBetaAcl:LbFrontendBetaAcl"
                        },
                        "description": "ACL rules\n"
                    },
                    "backendId": {
                        "type": "string",
                        "description": "The load-balancer backend ID\n"
                    },
                    "certificateId": {
                        "type": "string",
                        "description": "Certificate ID\n"
                    },
                    "inboundPort": {
                        "type": "integer",
                        "description": "TCP port to listen on the front side\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the frontend\n"
                    },
                    "timeoutClient": {
                        "type": "string",
                        "description": "Set the maximum inactivity time on the client side\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/lbIPBeta:LbIPBeta": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "The load-balancer public IP address\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The ID of the loadbalancer attached to this IP, if any\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain name for this IP\n"
                }
            },
            "required": [
                "ipAddress",
                "lbId",
                "organizationId",
                "region",
                "reverse"
            ],
            "inputProperties": {
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain name for this IP\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbIPBeta resources.\n",
                "properties": {
                    "ipAddress": {
                        "type": "string",
                        "description": "The load-balancer public IP address\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The ID of the loadbalancer attached to this IP, if any\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse domain name for this IP\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectBucket:ObjectBucket": {
            "properties": {
                "acl": {
                    "type": "string",
                    "description": "ACL of the bucket: either 'public-read' or 'private'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the bucket\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                }
            },
            "required": [
                "name",
                "region"
            ],
            "inputProperties": {
                "acl": {
                    "type": "string",
                    "description": "ACL of the bucket: either 'public-read' or 'private'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the bucket\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectBucket resources.\n",
                "properties": {
                    "acl": {
                        "type": "string",
                        "description": "ACL of the bucket: either 'public-read' or 'private'.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the bucket\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/rdbInstanceBeta:RdbInstanceBeta": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "Certificate of the database instance\n"
                },
                "disableBackup": {
                    "type": "boolean",
                    "description": "Disable automated backup for the database instance\n"
                },
                "endpointIp": {
                    "type": "string",
                    "description": "Endpoint IP of the database instance\n"
                },
                "endpointPort": {
                    "type": "integer",
                    "description": "Endpoint port of the database instance\n"
                },
                "engine": {
                    "type": "string",
                    "description": "Database's engine version id\n"
                },
                "isHaCluster": {
                    "type": "boolean",
                    "description": "Enable or disable high availability for the database instance\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database instance\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of database instance you want to create\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the database instance\n"
                },
                "readReplicas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:/RdbInstanceBetaReadReplica:RdbInstanceBetaReadReplica"
                    },
                    "description": "Read replicas of the database instance\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tags [\"tag1\", \"tag2\", ...] attached to a database instance\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the database instance\n"
                }
            },
            "required": [
                "certificate",
                "endpointIp",
                "endpointPort",
                "engine",
                "name",
                "nodeType",
                "organizationId",
                "password",
                "readReplicas",
                "region",
                "userName"
            ],
            "inputProperties": {
                "disableBackup": {
                    "type": "boolean",
                    "description": "Disable automated backup for the database instance\n"
                },
                "engine": {
                    "type": "string",
                    "description": "Database's engine version id\n"
                },
                "isHaCluster": {
                    "type": "boolean",
                    "description": "Enable or disable high availability for the database instance\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database instance\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of database instance you want to create\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the database instance\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tags [\"tag1\", \"tag2\", ...] attached to a database instance\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the database instance\n"
                }
            },
            "requiredInputs": [
                "engine",
                "nodeType",
                "password",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RdbInstanceBeta resources.\n",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "description": "Certificate of the database instance\n"
                    },
                    "disableBackup": {
                        "type": "boolean",
                        "description": "Disable automated backup for the database instance\n"
                    },
                    "endpointIp": {
                        "type": "string",
                        "description": "Endpoint IP of the database instance\n"
                    },
                    "endpointPort": {
                        "type": "integer",
                        "description": "Endpoint port of the database instance\n"
                    },
                    "engine": {
                        "type": "string",
                        "description": "Database's engine version id\n"
                    },
                    "isHaCluster": {
                        "type": "boolean",
                        "description": "Enable or disable high availability for the database instance\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the database instance\n"
                    },
                    "nodeType": {
                        "type": "string",
                        "description": "The type of database instance you want to create\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for the first user of the database instance\n"
                    },
                    "readReplicas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:/RdbInstanceBetaReadReplica:RdbInstanceBetaReadReplica"
                        },
                        "description": "Read replicas of the database instance\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of tags [\"tag1\", \"tag2\", ...] attached to a database instance\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Identifier for the first user of the database instance\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/registryNamespaceBeta:RegistryNamespaceBeta": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the container registry namespace\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint reachable by docker\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Define the default visibity policy\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the container registry namespace\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                }
            },
            "required": [
                "endpoint",
                "name",
                "organizationId",
                "region"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the container registry namespace\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Define the default visibity policy\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the container registry namespace\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RegistryNamespaceBeta resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the container registry namespace\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint reachable by docker\n"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "Define the default visibity policy\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the container registry namespace\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/sSHKey:SSHKey": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The ssh key\n"
                }
            },
            "required": [
                "key"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "The ssh key\n"
                }
            },
            "requiredInputs": [
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SSHKey resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The ssh key\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/securityGroup:SecurityGroup": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the security group\n"
                },
                "enableDefaultSecurity": {
                    "type": "boolean",
                    "description": "Add default security group rules\n"
                },
                "inboundDefaultPolicy": {
                    "type": "string",
                    "description": "Default inbound traffic policy for this security group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group\n"
                },
                "outboundDefaultPolicy": {
                    "type": "string",
                    "description": "Default outbound traffic policy for this security group\n"
                },
                "stateful": {
                    "type": "boolean",
                    "description": "Mark security group as stateful\n"
                }
            },
            "required": [
                "description",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the security group\n"
                },
                "enableDefaultSecurity": {
                    "type": "boolean",
                    "description": "Add default security group rules\n"
                },
                "inboundDefaultPolicy": {
                    "type": "string",
                    "description": "Default inbound traffic policy for this security group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group\n"
                },
                "outboundDefaultPolicy": {
                    "type": "string",
                    "description": "Default outbound traffic policy for this security group\n"
                },
                "stateful": {
                    "type": "boolean",
                    "description": "Mark security group as stateful\n"
                }
            },
            "requiredInputs": [
                "description"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the security group\n"
                    },
                    "enableDefaultSecurity": {
                        "type": "boolean",
                        "description": "Add default security group rules\n"
                    },
                    "inboundDefaultPolicy": {
                        "type": "string",
                        "description": "Default inbound traffic policy for this security group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the security group\n"
                    },
                    "outboundDefaultPolicy": {
                        "type": "string",
                        "description": "Default outbound traffic policy for this security group\n"
                    },
                    "stateful": {
                        "type": "boolean",
                        "description": "Mark security group as stateful\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/securityGroupRule:SecurityGroupRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when the security group rule is triggered (accept or drop)\n"
                },
                "direction": {
                    "type": "string",
                    "description": "The direction the traffic is affected (inbound or outbound)\n"
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range affected by the security group rule\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port affected by the security group rule\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the security group rule (ICMP, TCP or UDP)\n"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "The security group this rule is attached to\n"
                }
            },
            "required": [
                "action",
                "direction",
                "ipRange",
                "protocol",
                "securityGroup"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when the security group rule is triggered (accept or drop)\n"
                },
                "direction": {
                    "type": "string",
                    "description": "The direction the traffic is affected (inbound or outbound)\n"
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range affected by the security group rule\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port affected by the security group rule\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the security group rule (ICMP, TCP or UDP)\n"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "The security group this rule is attached to\n"
                }
            },
            "requiredInputs": [
                "action",
                "direction",
                "ipRange",
                "protocol",
                "securityGroup"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityGroupRule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "The action to take when the security group rule is triggered (accept or drop)\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "The direction the traffic is affected (inbound or outbound)\n"
                    },
                    "ipRange": {
                        "type": "string",
                        "description": "The ip range affected by the security group rule\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port affected by the security group rule\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol of the security group rule (ICMP, TCP or UDP)\n"
                    },
                    "securityGroup": {
                        "type": "string",
                        "description": "The security group this rule is attached to\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/server:Server": {
            "properties": {
                "bootType": {
                    "type": "string",
                    "description": "The boot_type of the server\n"
                },
                "bootscript": {
                    "type": "string",
                    "description": "The boot configuration of the server\n"
                },
                "cloudinit": {
                    "type": "string",
                    "description": "the cloudinit script associated with this server\n"
                },
                "dynamicIpRequired": {
                    "type": "boolean",
                    "description": "determines if a public IP address should be allocated for the server\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "determines if IPv6 is enabled for the server\n"
                },
                "image": {
                    "type": "string",
                    "description": "The base image of the server\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "the Scaleway internal IP address of the server\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "the public IPv4 address of the server\n"
                },
                "publicIpv6": {
                    "type": "string",
                    "description": "the public IPv6 address of the server, if enabled\n"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "The security group the server is attached to\n"
                },
                "state": {
                    "type": "string",
                    "description": "the server state (running, stopped)\n"
                },
                "stateDetail": {
                    "type": "string",
                    "description": "scaleway description of the server state\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server\n"
                },
                "type": {
                    "type": "string",
                    "description": "The instance type of the server\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:/ServerVolume:ServerVolume"
                    },
                    "description": "Volumes attached to the server on creation\n"
                }
            },
            "required": [
                "bootType",
                "cloudinit",
                "image",
                "name",
                "privateIp",
                "publicIp",
                "publicIpv6",
                "state",
                "stateDetail",
                "type"
            ],
            "inputProperties": {
                "bootType": {
                    "type": "string",
                    "description": "The boot_type of the server\n"
                },
                "bootscript": {
                    "type": "string",
                    "description": "The boot configuration of the server\n"
                },
                "cloudinit": {
                    "type": "string",
                    "description": "the cloudinit script associated with this server\n"
                },
                "dynamicIpRequired": {
                    "type": "boolean",
                    "description": "determines if a public IP address should be allocated for the server\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "determines if IPv6 is enabled for the server\n"
                },
                "image": {
                    "type": "string",
                    "description": "The base image of the server\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "the public IPv4 address of the server\n"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "The security group the server is attached to\n"
                },
                "state": {
                    "type": "string",
                    "description": "the server state (running, stopped)\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server\n"
                },
                "type": {
                    "type": "string",
                    "description": "The instance type of the server\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:/ServerVolume:ServerVolume"
                    },
                    "description": "Volumes attached to the server on creation\n"
                }
            },
            "requiredInputs": [
                "image",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Server resources.\n",
                "properties": {
                    "bootType": {
                        "type": "string",
                        "description": "The boot_type of the server\n"
                    },
                    "bootscript": {
                        "type": "string",
                        "description": "The boot configuration of the server\n"
                    },
                    "cloudinit": {
                        "type": "string",
                        "description": "the cloudinit script associated with this server\n"
                    },
                    "dynamicIpRequired": {
                        "type": "boolean",
                        "description": "determines if a public IP address should be allocated for the server\n"
                    },
                    "enableIpv6": {
                        "type": "boolean",
                        "description": "determines if IPv6 is enabled for the server\n"
                    },
                    "image": {
                        "type": "string",
                        "description": "The base image of the server\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "the Scaleway internal IP address of the server\n"
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "the public IPv4 address of the server\n"
                    },
                    "publicIpv6": {
                        "type": "string",
                        "description": "the public IPv6 address of the server, if enabled\n"
                    },
                    "securityGroup": {
                        "type": "string",
                        "description": "The security group the server is attached to\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "the server state (running, stopped)\n"
                    },
                    "stateDetail": {
                        "type": "string",
                        "description": "scaleway description of the server state\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the server\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The instance type of the server\n"
                    },
                    "volumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:/ServerVolume:ServerVolume"
                        },
                        "description": "Volumes attached to the server on creation\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/token:Token": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access_key.\n"
                },
                "creationIp": {
                    "type": "string",
                    "description": "The ip used to create the key.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The token description.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The account email. Defaults to registered user.\n"
                },
                "expirationDate": {
                    "type": "string",
                    "description": "The tokens expiration date\n"
                },
                "expires": {
                    "type": "boolean",
                    "description": "Defines if the token is set to expire\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password, in case a login is require\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret_key.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The userid of the associated user.\n"
                }
            },
            "required": [
                "accessKey",
                "creationIp",
                "email",
                "expirationDate",
                "secretKey",
                "userId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The token description.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The account email. Defaults to registered user.\n"
                },
                "expires": {
                    "type": "boolean",
                    "description": "Defines if the token is set to expire\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password, in case a login is require\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Token resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "The access_key.\n"
                    },
                    "creationIp": {
                        "type": "string",
                        "description": "The ip used to create the key.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The token description.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The account email. Defaults to registered user.\n"
                    },
                    "expirationDate": {
                        "type": "string",
                        "description": "The tokens expiration date\n"
                    },
                    "expires": {
                        "type": "boolean",
                        "description": "Defines if the token is set to expire\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "User password, in case a login is require\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The secret_key.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The userid of the associated user.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/userData:UserData": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the user data to manage\n"
                },
                "server": {
                    "type": "string",
                    "description": "The server the meta data is associated with\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the user\n"
                }
            },
            "required": [
                "key",
                "server",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "The key of the user data to manage\n"
                },
                "server": {
                    "type": "string",
                    "description": "The server the meta data is associated with\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the user\n"
                }
            },
            "requiredInputs": [
                "key",
                "server",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserData resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The key of the user data to manage\n"
                    },
                    "server": {
                        "type": "string",
                        "description": "The server the meta data is associated with\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the user\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/volume:Volume": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "the name of the volume\n"
                },
                "server": {
                    "type": "string",
                    "description": "the server the volume is attached to\n"
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "the size of the volume in GB\n"
                },
                "type": {
                    "type": "string",
                    "description": "the type of backing storage\n"
                }
            },
            "required": [
                "name",
                "server",
                "sizeInGb",
                "type"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "the name of the volume\n"
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "the size of the volume in GB\n"
                },
                "type": {
                    "type": "string",
                    "description": "the type of backing storage\n"
                }
            },
            "requiredInputs": [
                "sizeInGb",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Volume resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "the name of the volume\n"
                    },
                    "server": {
                        "type": "string",
                        "description": "the server the volume is attached to\n"
                    },
                    "sizeInGb": {
                        "type": "integer",
                        "description": "the size of the volume in GB\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "the type of backing storage\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/volumeAttachment:VolumeAttachment": {
            "properties": {
                "server": {
                    "type": "string",
                    "description": "the server a volume should be attached to\n"
                },
                "volume": {
                    "type": "string",
                    "description": "the volume to attach\n"
                }
            },
            "required": [
                "server",
                "volume"
            ],
            "inputProperties": {
                "server": {
                    "type": "string",
                    "description": "the server a volume should be attached to\n"
                },
                "volume": {
                    "type": "string",
                    "description": "the volume to attach\n"
                }
            },
            "requiredInputs": [
                "server",
                "volume"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VolumeAttachment resources.\n",
                "properties": {
                    "server": {
                        "type": "string",
                        "description": "the server a volume should be attached to\n"
                    },
                    "volume": {
                        "type": "string",
                        "description": "the volume to attach\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "scaleway:index/getAccountSSHKey:getAccountSSHKey": {
            "inputs": {
                "description": "A collection of arguments for invoking getAccountSSHKey.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "sshKeyId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccountSSHKey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "publicKey": {
                        "type": "string"
                    },
                    "sshKeyId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "organizationId",
                    "publicKey",
                    "sshKeyId",
                    "id"
                ]
            }
        },
        "scaleway:index/getBaremetalOffer:getBaremetalOffer": {
            "inputs": {
                "description": "A collection of arguments for invoking getBaremetalOffer.\n",
                "properties": {
                    "includeDisabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "offerId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBaremetalOffer.\n",
                "properties": {
                    "bandwidth": {
                        "type": "integer"
                    },
                    "commercialRange": {
                        "type": "string"
                    },
                    "cpus": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:/getBaremetalOfferCpus:getBaremetalOfferCpus"
                        }
                    },
                    "disks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:/getBaremetalOfferDisk:getBaremetalOfferDisk"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeDisabled": {
                        "type": "boolean"
                    },
                    "memories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:/getBaremetalOfferMemory:getBaremetalOfferMemory"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "offerId": {
                        "type": "string"
                    },
                    "stock": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "bandwidth",
                    "commercialRange",
                    "cpus",
                    "disks",
                    "memories",
                    "stock",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getBootscript:getBootscript": {
            "inputs": {
                "description": "A collection of arguments for invoking getBootscript.\n",
                "properties": {
                    "architecture": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nameFilter": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBootscript.\n",
                "properties": {
                    "architecture": {
                        "type": "string"
                    },
                    "bootCmdArgs": {
                        "type": "string"
                    },
                    "dtb": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "initrd": {
                        "type": "string"
                    },
                    "kernel": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nameFilter": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string"
                    },
                    "public": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "architecture",
                    "bootCmdArgs",
                    "dtb",
                    "initrd",
                    "kernel",
                    "organization",
                    "public",
                    "id"
                ]
            }
        },
        "scaleway:index/getImage:getImage": {
            "inputs": {
                "description": "A collection of arguments for invoking getImage.\n",
                "properties": {
                    "architecture": {
                        "type": "string"
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nameFilter": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "architecture"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getImage.\n",
                "properties": {
                    "architecture": {
                        "type": "string"
                    },
                    "creationDate": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nameFilter": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string"
                    },
                    "public": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "architecture",
                    "creationDate",
                    "name",
                    "organization",
                    "public",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceImage:getInstanceImage": {
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceImage.\n",
                "properties": {
                    "architecture": {
                        "type": "string"
                    },
                    "imageId": {
                        "type": "string"
                    },
                    "latest": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceImage.\n",
                "properties": {
                    "additionalVolumeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "architecture": {
                        "type": "string"
                    },
                    "creationDate": {
                        "type": "string"
                    },
                    "defaultBootscriptId": {
                        "type": "string"
                    },
                    "fromServerId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageId": {
                        "type": "string"
                    },
                    "latest": {
                        "type": "boolean"
                    },
                    "modificationDate": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "public": {
                        "type": "boolean"
                    },
                    "rootVolumeId": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "additionalVolumeIds",
                    "creationDate",
                    "defaultBootscriptId",
                    "fromServerId",
                    "modificationDate",
                    "organizationId",
                    "public",
                    "rootVolumeId",
                    "state",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceSecurityGroup:getInstanceSecurityGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceSecurityGroup.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "securityGroupId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceSecurityGroup.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "externalRules": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "inboundDefaultPolicy": {
                        "type": "string"
                    },
                    "inboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:/getInstanceSecurityGroupInboundRule:getInstanceSecurityGroupInboundRule"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "outboundDefaultPolicy": {
                        "type": "string"
                    },
                    "outboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:/getInstanceSecurityGroupOutboundRule:getInstanceSecurityGroupOutboundRule"
                        }
                    },
                    "securityGroupId": {
                        "type": "string"
                    },
                    "stateful": {
                        "type": "boolean"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "externalRules",
                    "inboundDefaultPolicy",
                    "inboundRules",
                    "organizationId",
                    "outboundDefaultPolicy",
                    "outboundRules",
                    "stateful",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceServer:getInstanceServer": {
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceServer.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceServer.\n",
                "properties": {
                    "additionalVolumeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "bootType": {
                        "type": "string"
                    },
                    "cloudInit": {
                        "type": "string"
                    },
                    "disableDynamicIp": {
                        "type": "boolean"
                    },
                    "disablePublicIp": {
                        "type": "boolean"
                    },
                    "enableDynamicIp": {
                        "type": "boolean"
                    },
                    "enableIpv6": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "image": {
                        "type": "string"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "ipv6Address": {
                        "type": "string"
                    },
                    "ipv6Gateway": {
                        "type": "string"
                    },
                    "ipv6PrefixLength": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "placementGroupId": {
                        "type": "string"
                    },
                    "placementGroupPolicyRespected": {
                        "type": "boolean"
                    },
                    "privateIp": {
                        "type": "string"
                    },
                    "publicIp": {
                        "type": "string"
                    },
                    "rootVolumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:/getInstanceServerRootVolume:getInstanceServerRootVolume"
                        }
                    },
                    "securityGroupId": {
                        "type": "string"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "userDatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:/getInstanceServerUserData:getInstanceServerUserData"
                        }
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "additionalVolumeIds",
                    "bootType",
                    "cloudInit",
                    "disableDynamicIp",
                    "disablePublicIp",
                    "enableDynamicIp",
                    "enableIpv6",
                    "image",
                    "ipId",
                    "ipv6Address",
                    "ipv6Gateway",
                    "ipv6PrefixLength",
                    "organizationId",
                    "placementGroupId",
                    "placementGroupPolicyRespected",
                    "privateIp",
                    "publicIp",
                    "rootVolumes",
                    "securityGroupId",
                    "state",
                    "tags",
                    "type",
                    "userDatas",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceVolume:getInstanceVolume": {
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceVolume.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "volumeId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceVolume.\n",
                "properties": {
                    "fromSnapshotId": {
                        "type": "string"
                    },
                    "fromVolumeId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "sizeInGb": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "volumeId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "fromSnapshotId",
                    "fromVolumeId",
                    "organizationId",
                    "serverId",
                    "sizeInGb",
                    "type",
                    "id"
                ]
            }
        },
        "scaleway:index/getLbIPBeta:getLbIPBeta": {
            "inputs": {
                "description": "A collection of arguments for invoking getLbIPBeta.\n",
                "properties": {
                    "ipAddress": {
                        "type": "string"
                    },
                    "ipId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLbIPBeta.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "lbId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "reverse": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "lbId",
                    "organizationId",
                    "region",
                    "reverse",
                    "id"
                ]
            }
        },
        "scaleway:index/getMarketplaceImageBeta:getMarketplaceImageBeta": {
            "inputs": {
                "description": "A collection of arguments for invoking getMarketplaceImageBeta.\n",
                "properties": {
                    "instanceType": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "label"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMarketplaceImageBeta.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceType": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "label",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getRegistryImageBeta:getRegistryImageBeta": {
            "inputs": {
                "description": "A collection of arguments for invoking getRegistryImageBeta.\n",
                "properties": {
                    "imageId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegistryImageBeta.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "visibility": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "namespaceId",
                    "organizationId",
                    "region",
                    "size",
                    "tags",
                    "visibility",
                    "id"
                ]
            }
        },
        "scaleway:index/getRegistryNamespaceBeta:getRegistryNamespaceBeta": {
            "inputs": {
                "description": "A collection of arguments for invoking getRegistryNamespaceBeta.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegistryNamespaceBeta.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "endpoint": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isPublic": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "endpoint",
                    "isPublic",
                    "organizationId",
                    "id"
                ]
            }
        },
        "scaleway:index/getSecurityGroup:getSecurityGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getSecurityGroup.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecurityGroup.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "enableDefaultSecurity": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "enableDefaultSecurity",
                    "name",
                    "id"
                ]
            }
        },
        "scaleway:index/getVolume:getVolume": {
            "inputs": {
                "description": "A collection of arguments for invoking getVolume.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVolume.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "server": {
                        "type": "string"
                    },
                    "sizeInGb": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "server",
                    "sizeInGb",
                    "type",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing scaleway cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/scaleway/terraform-provider-scaleway)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-scaleway` repo](https://github.com/pulumi/pulumi-scaleway/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`scaleway/terraform-provider-scaleway` repo](https://github.com/scaleway/terraform-provider-scaleway/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/scaleway/terraform-provider-scaleway)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-scaleway` repo](https://github.com/pulumi/pulumi-scaleway/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`scaleway/terraform-provider-scaleway` repo](https://github.com/scaleway/terraform-provider-scaleway/issues).",
            "requires": {
                "pulumi": "\u003e=2.0.0,\u003c3.0.0"
            }
        }
    }
}