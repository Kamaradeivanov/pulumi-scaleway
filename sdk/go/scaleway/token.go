// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Token struct {
	pulumi.CustomResourceState

	// The access_key.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// The ip used to create the key.
	CreationIp pulumi.StringOutput `pulumi:"creationIp"`
	// The token description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The account email. Defaults to registered user.
	Email pulumi.StringOutput `pulumi:"email"`
	// The tokens expiration date
	ExpirationDate pulumi.StringOutput `pulumi:"expirationDate"`
	// Defines if the token is set to expire
	Expires pulumi.BoolPtrOutput `pulumi:"expires"`
	// User password, in case a login is require
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The secret_key.
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
	// The userid of the associated user.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewToken registers a new resource with the given unique name, arguments, and options.
func NewToken(ctx *pulumi.Context,
	name string, args *TokenArgs, opts ...pulumi.ResourceOption) (*Token, error) {
	if args == nil {
		args = &TokenArgs{}
	}
	var resource Token
	err := ctx.RegisterResource("scaleway:index/token:Token", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetToken gets an existing Token resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TokenState, opts ...pulumi.ResourceOption) (*Token, error) {
	var resource Token
	err := ctx.ReadResource("scaleway:index/token:Token", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Token resources.
type tokenState struct {
	// The access_key.
	AccessKey *string `pulumi:"accessKey"`
	// The ip used to create the key.
	CreationIp *string `pulumi:"creationIp"`
	// The token description.
	Description *string `pulumi:"description"`
	// The account email. Defaults to registered user.
	Email *string `pulumi:"email"`
	// The tokens expiration date
	ExpirationDate *string `pulumi:"expirationDate"`
	// Defines if the token is set to expire
	Expires *bool `pulumi:"expires"`
	// User password, in case a login is require
	Password *string `pulumi:"password"`
	// The secret_key.
	SecretKey *string `pulumi:"secretKey"`
	// The userid of the associated user.
	UserId *string `pulumi:"userId"`
}

type TokenState struct {
	// The access_key.
	AccessKey pulumi.StringPtrInput
	// The ip used to create the key.
	CreationIp pulumi.StringPtrInput
	// The token description.
	Description pulumi.StringPtrInput
	// The account email. Defaults to registered user.
	Email pulumi.StringPtrInput
	// The tokens expiration date
	ExpirationDate pulumi.StringPtrInput
	// Defines if the token is set to expire
	Expires pulumi.BoolPtrInput
	// User password, in case a login is require
	Password pulumi.StringPtrInput
	// The secret_key.
	SecretKey pulumi.StringPtrInput
	// The userid of the associated user.
	UserId pulumi.StringPtrInput
}

func (TokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*tokenState)(nil)).Elem()
}

type tokenArgs struct {
	// The token description.
	Description *string `pulumi:"description"`
	// The account email. Defaults to registered user.
	Email *string `pulumi:"email"`
	// Defines if the token is set to expire
	Expires *bool `pulumi:"expires"`
	// User password, in case a login is require
	Password *string `pulumi:"password"`
}

// The set of arguments for constructing a Token resource.
type TokenArgs struct {
	// The token description.
	Description pulumi.StringPtrInput
	// The account email. Defaults to registered user.
	Email pulumi.StringPtrInput
	// Defines if the token is set to expire
	Expires pulumi.BoolPtrInput
	// User password, in case a login is require
	Password pulumi.StringPtrInput
}

func (TokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tokenArgs)(nil)).Elem()
}
