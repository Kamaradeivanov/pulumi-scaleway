# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetInstanceSecurityGroupResult:
    """
    A collection of values returned by getInstanceSecurityGroup.
    """
    def __init__(__self__, description=None, external_rules=None, id=None, inbound_default_policy=None, inbound_rules=None, name=None, organization_id=None, outbound_default_policy=None, outbound_rules=None, security_group_id=None, stateful=None, zone=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        if external_rules and not isinstance(external_rules, bool):
            raise TypeError("Expected argument 'external_rules' to be a bool")
        __self__.external_rules = external_rules
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if inbound_default_policy and not isinstance(inbound_default_policy, str):
            raise TypeError("Expected argument 'inbound_default_policy' to be a str")
        __self__.inbound_default_policy = inbound_default_policy
        if inbound_rules and not isinstance(inbound_rules, list):
            raise TypeError("Expected argument 'inbound_rules' to be a list")
        __self__.inbound_rules = inbound_rules
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        __self__.organization_id = organization_id
        if outbound_default_policy and not isinstance(outbound_default_policy, str):
            raise TypeError("Expected argument 'outbound_default_policy' to be a str")
        __self__.outbound_default_policy = outbound_default_policy
        if outbound_rules and not isinstance(outbound_rules, list):
            raise TypeError("Expected argument 'outbound_rules' to be a list")
        __self__.outbound_rules = outbound_rules
        if security_group_id and not isinstance(security_group_id, str):
            raise TypeError("Expected argument 'security_group_id' to be a str")
        __self__.security_group_id = security_group_id
        if stateful and not isinstance(stateful, bool):
            raise TypeError("Expected argument 'stateful' to be a bool")
        __self__.stateful = stateful
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        __self__.zone = zone
class AwaitableGetInstanceSecurityGroupResult(GetInstanceSecurityGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceSecurityGroupResult(
            description=self.description,
            external_rules=self.external_rules,
            id=self.id,
            inbound_default_policy=self.inbound_default_policy,
            inbound_rules=self.inbound_rules,
            name=self.name,
            organization_id=self.organization_id,
            outbound_default_policy=self.outbound_default_policy,
            outbound_rules=self.outbound_rules,
            security_group_id=self.security_group_id,
            stateful=self.stateful,
            zone=self.zone)

def get_instance_security_group(name=None,security_group_id=None,zone=None,opts=None):
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()


    __args__['name'] = name
    __args__['securityGroupId'] = security_group_id
    __args__['zone'] = zone
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('scaleway:index/getInstanceSecurityGroup:getInstanceSecurityGroup', __args__, opts=opts).value

    return AwaitableGetInstanceSecurityGroupResult(
        description=__ret__.get('description'),
        external_rules=__ret__.get('externalRules'),
        id=__ret__.get('id'),
        inbound_default_policy=__ret__.get('inboundDefaultPolicy'),
        inbound_rules=__ret__.get('inboundRules'),
        name=__ret__.get('name'),
        organization_id=__ret__.get('organizationId'),
        outbound_default_policy=__ret__.get('outboundDefaultPolicy'),
        outbound_rules=__ret__.get('outboundRules'),
        security_group_id=__ret__.get('securityGroupId'),
        stateful=__ret__.get('stateful'),
        zone=__ret__.get('zone'))
