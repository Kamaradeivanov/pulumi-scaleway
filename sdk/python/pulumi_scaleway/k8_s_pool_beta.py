# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class K8SPoolBeta(pulumi.CustomResource):
    autohealing: pulumi.Output[bool]
    """
    Enable the autohealing on the pool
    """
    autoscaling: pulumi.Output[bool]
    """
    Enable the autoscaling on the pool
    """
    cluster_id: pulumi.Output[str]
    """
    The ID of the cluster on which this pool will be created
    """
    container_runtime: pulumi.Output[str]
    """
    Container runtime for the pool
    """
    created_at: pulumi.Output[str]
    """
    The date and time of the creation of the pool
    """
    current_size: pulumi.Output[float]
    """
    The actual size of the pool
    """
    max_size: pulumi.Output[float]
    """
    Maximum size of the pool
    """
    min_size: pulumi.Output[float]
    """
    Minimun size of the pool
    """
    name: pulumi.Output[str]
    """
    The name of the cluster
    """
    node_type: pulumi.Output[str]
    """
    Server type of the pool servers
    """
    nodes: pulumi.Output[list]
    placement_group_id: pulumi.Output[str]
    """
    ID of the placement group
    """
    region: pulumi.Output[str]
    """
    The region you want to attach the resource to
    """
    size: pulumi.Output[float]
    """
    Size of the pool
    """
    status: pulumi.Output[str]
    """
    The status of the pool
    """
    tags: pulumi.Output[list]
    """
    The tags associated with the pool
    """
    updated_at: pulumi.Output[str]
    """
    The date and time of the last update of the pool
    """
    version: pulumi.Output[str]
    """
    The Kubernetes version of the pool
    """
    wait_for_pool_ready: pulumi.Output[bool]
    """
    Whether to wait for the pool to be ready
    """
    def __init__(__self__, resource_name, opts=None, autohealing=None, autoscaling=None, cluster_id=None, container_runtime=None, max_size=None, min_size=None, name=None, node_type=None, placement_group_id=None, region=None, size=None, tags=None, wait_for_pool_ready=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a K8SPoolBeta resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] autohealing: Enable the autohealing on the pool
        :param pulumi.Input[bool] autoscaling: Enable the autoscaling on the pool
        :param pulumi.Input[str] cluster_id: The ID of the cluster on which this pool will be created
        :param pulumi.Input[str] container_runtime: Container runtime for the pool
        :param pulumi.Input[float] max_size: Maximum size of the pool
        :param pulumi.Input[float] min_size: Minimun size of the pool
        :param pulumi.Input[str] name: The name of the cluster
        :param pulumi.Input[str] node_type: Server type of the pool servers
        :param pulumi.Input[str] placement_group_id: ID of the placement group
        :param pulumi.Input[str] region: The region you want to attach the resource to
        :param pulumi.Input[float] size: Size of the pool
        :param pulumi.Input[list] tags: The tags associated with the pool
        :param pulumi.Input[bool] wait_for_pool_ready: Whether to wait for the pool to be ready
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['autohealing'] = autohealing
            __props__['autoscaling'] = autoscaling
            if cluster_id is None:
                raise TypeError("Missing required property 'cluster_id'")
            __props__['cluster_id'] = cluster_id
            __props__['container_runtime'] = container_runtime
            __props__['max_size'] = max_size
            __props__['min_size'] = min_size
            __props__['name'] = name
            if node_type is None:
                raise TypeError("Missing required property 'node_type'")
            __props__['node_type'] = node_type
            __props__['placement_group_id'] = placement_group_id
            __props__['region'] = region
            if size is None:
                raise TypeError("Missing required property 'size'")
            __props__['size'] = size
            __props__['tags'] = tags
            __props__['wait_for_pool_ready'] = wait_for_pool_ready
            __props__['created_at'] = None
            __props__['current_size'] = None
            __props__['nodes'] = None
            __props__['status'] = None
            __props__['updated_at'] = None
            __props__['version'] = None
        super(K8SPoolBeta, __self__).__init__(
            'scaleway:index/k8SPoolBeta:K8SPoolBeta',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, autohealing=None, autoscaling=None, cluster_id=None, container_runtime=None, created_at=None, current_size=None, max_size=None, min_size=None, name=None, node_type=None, nodes=None, placement_group_id=None, region=None, size=None, status=None, tags=None, updated_at=None, version=None, wait_for_pool_ready=None):
        """
        Get an existing K8SPoolBeta resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] autohealing: Enable the autohealing on the pool
        :param pulumi.Input[bool] autoscaling: Enable the autoscaling on the pool
        :param pulumi.Input[str] cluster_id: The ID of the cluster on which this pool will be created
        :param pulumi.Input[str] container_runtime: Container runtime for the pool
        :param pulumi.Input[str] created_at: The date and time of the creation of the pool
        :param pulumi.Input[float] current_size: The actual size of the pool
        :param pulumi.Input[float] max_size: Maximum size of the pool
        :param pulumi.Input[float] min_size: Minimun size of the pool
        :param pulumi.Input[str] name: The name of the cluster
        :param pulumi.Input[str] node_type: Server type of the pool servers
        :param pulumi.Input[str] placement_group_id: ID of the placement group
        :param pulumi.Input[str] region: The region you want to attach the resource to
        :param pulumi.Input[float] size: Size of the pool
        :param pulumi.Input[str] status: The status of the pool
        :param pulumi.Input[list] tags: The tags associated with the pool
        :param pulumi.Input[str] updated_at: The date and time of the last update of the pool
        :param pulumi.Input[str] version: The Kubernetes version of the pool
        :param pulumi.Input[bool] wait_for_pool_ready: Whether to wait for the pool to be ready

        The **nodes** object supports the following:

          * `name` (`pulumi.Input[str]`)
          * `public_ip` (`pulumi.Input[str]`)
          * `publicIpV6` (`pulumi.Input[str]`)
          * `status` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["autohealing"] = autohealing
        __props__["autoscaling"] = autoscaling
        __props__["cluster_id"] = cluster_id
        __props__["container_runtime"] = container_runtime
        __props__["created_at"] = created_at
        __props__["current_size"] = current_size
        __props__["max_size"] = max_size
        __props__["min_size"] = min_size
        __props__["name"] = name
        __props__["node_type"] = node_type
        __props__["nodes"] = nodes
        __props__["placement_group_id"] = placement_group_id
        __props__["region"] = region
        __props__["size"] = size
        __props__["status"] = status
        __props__["tags"] = tags
        __props__["updated_at"] = updated_at
        __props__["version"] = version
        __props__["wait_for_pool_ready"] = wait_for_pool_ready
        return K8SPoolBeta(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
