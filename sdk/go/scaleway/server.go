// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Server struct {
	pulumi.CustomResourceState

	// The boot_type of the server
	BootType pulumi.StringOutput `pulumi:"bootType"`
	// The boot configuration of the server
	Bootscript pulumi.StringPtrOutput `pulumi:"bootscript"`
	// the cloudinit script associated with this server
	Cloudinit pulumi.StringOutput `pulumi:"cloudinit"`
	// determines if a public IP address should be allocated for the server
	DynamicIpRequired pulumi.BoolPtrOutput `pulumi:"dynamicIpRequired"`
	// determines if IPv6 is enabled for the server
	EnableIpv6 pulumi.BoolPtrOutput `pulumi:"enableIpv6"`
	// The base image of the server
	Image pulumi.StringOutput `pulumi:"image"`
	// The name of the server
	Name pulumi.StringOutput `pulumi:"name"`
	// the Scaleway internal IP address of the server
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// the public IPv4 address of the server
	PublicIp pulumi.StringOutput `pulumi:"publicIp"`
	// the public IPv6 address of the server, if enabled
	PublicIpv6 pulumi.StringOutput `pulumi:"publicIpv6"`
	// The security group the server is attached to
	SecurityGroup pulumi.StringPtrOutput `pulumi:"securityGroup"`
	// the server state (running, stopped)
	State pulumi.StringOutput `pulumi:"state"`
	// scaleway description of the server state
	StateDetail pulumi.StringOutput `pulumi:"stateDetail"`
	// The tags associated with the server
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The instance type of the server
	Type pulumi.StringOutput `pulumi:"type"`
	// Volumes attached to the server on creation
	Volumes ServerVolumeArrayOutput `pulumi:"volumes"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil || args.Image == nil {
		return nil, errors.New("missing required argument 'Image'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &ServerArgs{}
	}
	var resource Server
	err := ctx.RegisterResource("scaleway:index/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("scaleway:index/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	// The boot_type of the server
	BootType *string `pulumi:"bootType"`
	// The boot configuration of the server
	Bootscript *string `pulumi:"bootscript"`
	// the cloudinit script associated with this server
	Cloudinit *string `pulumi:"cloudinit"`
	// determines if a public IP address should be allocated for the server
	DynamicIpRequired *bool `pulumi:"dynamicIpRequired"`
	// determines if IPv6 is enabled for the server
	EnableIpv6 *bool `pulumi:"enableIpv6"`
	// The base image of the server
	Image *string `pulumi:"image"`
	// The name of the server
	Name *string `pulumi:"name"`
	// the Scaleway internal IP address of the server
	PrivateIp *string `pulumi:"privateIp"`
	// the public IPv4 address of the server
	PublicIp *string `pulumi:"publicIp"`
	// the public IPv6 address of the server, if enabled
	PublicIpv6 *string `pulumi:"publicIpv6"`
	// The security group the server is attached to
	SecurityGroup *string `pulumi:"securityGroup"`
	// the server state (running, stopped)
	State *string `pulumi:"state"`
	// scaleway description of the server state
	StateDetail *string `pulumi:"stateDetail"`
	// The tags associated with the server
	Tags []string `pulumi:"tags"`
	// The instance type of the server
	Type *string `pulumi:"type"`
	// Volumes attached to the server on creation
	Volumes []ServerVolume `pulumi:"volumes"`
}

type ServerState struct {
	// The boot_type of the server
	BootType pulumi.StringPtrInput
	// The boot configuration of the server
	Bootscript pulumi.StringPtrInput
	// the cloudinit script associated with this server
	Cloudinit pulumi.StringPtrInput
	// determines if a public IP address should be allocated for the server
	DynamicIpRequired pulumi.BoolPtrInput
	// determines if IPv6 is enabled for the server
	EnableIpv6 pulumi.BoolPtrInput
	// The base image of the server
	Image pulumi.StringPtrInput
	// The name of the server
	Name pulumi.StringPtrInput
	// the Scaleway internal IP address of the server
	PrivateIp pulumi.StringPtrInput
	// the public IPv4 address of the server
	PublicIp pulumi.StringPtrInput
	// the public IPv6 address of the server, if enabled
	PublicIpv6 pulumi.StringPtrInput
	// The security group the server is attached to
	SecurityGroup pulumi.StringPtrInput
	// the server state (running, stopped)
	State pulumi.StringPtrInput
	// scaleway description of the server state
	StateDetail pulumi.StringPtrInput
	// The tags associated with the server
	Tags pulumi.StringArrayInput
	// The instance type of the server
	Type pulumi.StringPtrInput
	// Volumes attached to the server on creation
	Volumes ServerVolumeArrayInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	// The boot_type of the server
	BootType *string `pulumi:"bootType"`
	// The boot configuration of the server
	Bootscript *string `pulumi:"bootscript"`
	// the cloudinit script associated with this server
	Cloudinit *string `pulumi:"cloudinit"`
	// determines if a public IP address should be allocated for the server
	DynamicIpRequired *bool `pulumi:"dynamicIpRequired"`
	// determines if IPv6 is enabled for the server
	EnableIpv6 *bool `pulumi:"enableIpv6"`
	// The base image of the server
	Image string `pulumi:"image"`
	// The name of the server
	Name *string `pulumi:"name"`
	// the public IPv4 address of the server
	PublicIp *string `pulumi:"publicIp"`
	// The security group the server is attached to
	SecurityGroup *string `pulumi:"securityGroup"`
	// the server state (running, stopped)
	State *string `pulumi:"state"`
	// The tags associated with the server
	Tags []string `pulumi:"tags"`
	// The instance type of the server
	Type string `pulumi:"type"`
	// Volumes attached to the server on creation
	Volumes []ServerVolume `pulumi:"volumes"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	// The boot_type of the server
	BootType pulumi.StringPtrInput
	// The boot configuration of the server
	Bootscript pulumi.StringPtrInput
	// the cloudinit script associated with this server
	Cloudinit pulumi.StringPtrInput
	// determines if a public IP address should be allocated for the server
	DynamicIpRequired pulumi.BoolPtrInput
	// determines if IPv6 is enabled for the server
	EnableIpv6 pulumi.BoolPtrInput
	// The base image of the server
	Image pulumi.StringInput
	// The name of the server
	Name pulumi.StringPtrInput
	// the public IPv4 address of the server
	PublicIp pulumi.StringPtrInput
	// The security group the server is attached to
	SecurityGroup pulumi.StringPtrInput
	// the server state (running, stopped)
	State pulumi.StringPtrInput
	// The tags associated with the server
	Tags pulumi.StringArrayInput
	// The instance type of the server
	Type pulumi.StringInput
	// Volumes attached to the server on creation
	Volumes ServerVolumeArrayInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}
