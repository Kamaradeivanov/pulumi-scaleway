# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetInstanceVolumeResult:
    """
    A collection of values returned by getInstanceVolume.
    """
    def __init__(__self__, from_snapshot_id=None, from_volume_id=None, id=None, name=None, organization_id=None, server_id=None, size_in_gb=None, type=None, volume_id=None, zone=None):
        if from_snapshot_id and not isinstance(from_snapshot_id, str):
            raise TypeError("Expected argument 'from_snapshot_id' to be a str")
        __self__.from_snapshot_id = from_snapshot_id
        if from_volume_id and not isinstance(from_volume_id, str):
            raise TypeError("Expected argument 'from_volume_id' to be a str")
        __self__.from_volume_id = from_volume_id
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        __self__.organization_id = organization_id
        if server_id and not isinstance(server_id, str):
            raise TypeError("Expected argument 'server_id' to be a str")
        __self__.server_id = server_id
        if size_in_gb and not isinstance(size_in_gb, float):
            raise TypeError("Expected argument 'size_in_gb' to be a float")
        __self__.size_in_gb = size_in_gb
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        if volume_id and not isinstance(volume_id, str):
            raise TypeError("Expected argument 'volume_id' to be a str")
        __self__.volume_id = volume_id
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        __self__.zone = zone
class AwaitableGetInstanceVolumeResult(GetInstanceVolumeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceVolumeResult(
            from_snapshot_id=self.from_snapshot_id,
            from_volume_id=self.from_volume_id,
            id=self.id,
            name=self.name,
            organization_id=self.organization_id,
            server_id=self.server_id,
            size_in_gb=self.size_in_gb,
            type=self.type,
            volume_id=self.volume_id,
            zone=self.zone)

def get_instance_volume(name=None,volume_id=None,zone=None,opts=None):
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()


    __args__['name'] = name
    __args__['volumeId'] = volume_id
    __args__['zone'] = zone
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('scaleway:index/getInstanceVolume:getInstanceVolume', __args__, opts=opts).value

    return AwaitableGetInstanceVolumeResult(
        from_snapshot_id=__ret__.get('fromSnapshotId'),
        from_volume_id=__ret__.get('fromVolumeId'),
        id=__ret__.get('id'),
        name=__ret__.get('name'),
        organization_id=__ret__.get('organizationId'),
        server_id=__ret__.get('serverId'),
        size_in_gb=__ret__.get('sizeInGb'),
        type=__ret__.get('type'),
        volume_id=__ret__.get('volumeId'),
        zone=__ret__.get('zone'))
