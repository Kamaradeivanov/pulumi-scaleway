# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetInstanceImageResult:
    """
    A collection of values returned by getInstanceImage.
    """
    def __init__(__self__, additional_volume_ids=None, architecture=None, creation_date=None, default_bootscript_id=None, from_server_id=None, id=None, image_id=None, latest=None, modification_date=None, name=None, organization_id=None, public=None, root_volume_id=None, state=None, zone=None):
        if additional_volume_ids and not isinstance(additional_volume_ids, list):
            raise TypeError("Expected argument 'additional_volume_ids' to be a list")
        __self__.additional_volume_ids = additional_volume_ids
        if architecture and not isinstance(architecture, str):
            raise TypeError("Expected argument 'architecture' to be a str")
        __self__.architecture = architecture
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        __self__.creation_date = creation_date
        if default_bootscript_id and not isinstance(default_bootscript_id, str):
            raise TypeError("Expected argument 'default_bootscript_id' to be a str")
        __self__.default_bootscript_id = default_bootscript_id
        if from_server_id and not isinstance(from_server_id, str):
            raise TypeError("Expected argument 'from_server_id' to be a str")
        __self__.from_server_id = from_server_id
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if image_id and not isinstance(image_id, str):
            raise TypeError("Expected argument 'image_id' to be a str")
        __self__.image_id = image_id
        if latest and not isinstance(latest, bool):
            raise TypeError("Expected argument 'latest' to be a bool")
        __self__.latest = latest
        if modification_date and not isinstance(modification_date, str):
            raise TypeError("Expected argument 'modification_date' to be a str")
        __self__.modification_date = modification_date
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        __self__.organization_id = organization_id
        if public and not isinstance(public, bool):
            raise TypeError("Expected argument 'public' to be a bool")
        __self__.public = public
        if root_volume_id and not isinstance(root_volume_id, str):
            raise TypeError("Expected argument 'root_volume_id' to be a str")
        __self__.root_volume_id = root_volume_id
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        __self__.state = state
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        __self__.zone = zone
class AwaitableGetInstanceImageResult(GetInstanceImageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceImageResult(
            additional_volume_ids=self.additional_volume_ids,
            architecture=self.architecture,
            creation_date=self.creation_date,
            default_bootscript_id=self.default_bootscript_id,
            from_server_id=self.from_server_id,
            id=self.id,
            image_id=self.image_id,
            latest=self.latest,
            modification_date=self.modification_date,
            name=self.name,
            organization_id=self.organization_id,
            public=self.public,
            root_volume_id=self.root_volume_id,
            state=self.state,
            zone=self.zone)

def get_instance_image(architecture=None,image_id=None,latest=None,name=None,organization_id=None,zone=None,opts=None):
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()


    __args__['architecture'] = architecture
    __args__['imageId'] = image_id
    __args__['latest'] = latest
    __args__['name'] = name
    __args__['organizationId'] = organization_id
    __args__['zone'] = zone
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('scaleway:index/getInstanceImage:getInstanceImage', __args__, opts=opts).value

    return AwaitableGetInstanceImageResult(
        additional_volume_ids=__ret__.get('additionalVolumeIds'),
        architecture=__ret__.get('architecture'),
        creation_date=__ret__.get('creationDate'),
        default_bootscript_id=__ret__.get('defaultBootscriptId'),
        from_server_id=__ret__.get('fromServerId'),
        id=__ret__.get('id'),
        image_id=__ret__.get('imageId'),
        latest=__ret__.get('latest'),
        modification_date=__ret__.get('modificationDate'),
        name=__ret__.get('name'),
        organization_id=__ret__.get('organizationId'),
        public=__ret__.get('public'),
        root_volume_id=__ret__.get('rootVolumeId'),
        state=__ret__.get('state'),
        zone=__ret__.get('zone'))
