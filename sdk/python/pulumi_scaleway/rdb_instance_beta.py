# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class RdbInstanceBeta(pulumi.CustomResource):
    certificate: pulumi.Output[str]
    """
    Certificate of the database instance
    """
    disable_backup: pulumi.Output[bool]
    """
    Disable automated backup for the database instance
    """
    endpoint_ip: pulumi.Output[str]
    """
    Endpoint IP of the database instance
    """
    endpoint_port: pulumi.Output[float]
    """
    Endpoint port of the database instance
    """
    engine: pulumi.Output[str]
    """
    Database's engine version id
    """
    is_ha_cluster: pulumi.Output[bool]
    """
    Enable or disable high availability for the database instance
    """
    name: pulumi.Output[str]
    """
    Name of the database instance
    """
    node_type: pulumi.Output[str]
    """
    The type of database instance you want to create
    """
    organization_id: pulumi.Output[str]
    """
    The organization_id you want to attach the resource to
    """
    password: pulumi.Output[str]
    """
    Password for the first user of the database instance
    """
    read_replicas: pulumi.Output[list]
    """
    Read replicas of the database instance

      * `ip` (`str`)
      * `name` (`str`)
      * `port` (`float`)
    """
    region: pulumi.Output[str]
    """
    The region you want to attach the resource to
    """
    tags: pulumi.Output[list]
    """
    List of tags ["tag1", "tag2", ...] attached to a database instance
    """
    user_name: pulumi.Output[str]
    """
    Identifier for the first user of the database instance
    """
    def __init__(__self__, resource_name, opts=None, disable_backup=None, engine=None, is_ha_cluster=None, name=None, node_type=None, organization_id=None, password=None, region=None, tags=None, user_name=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a RdbInstanceBeta resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] disable_backup: Disable automated backup for the database instance
        :param pulumi.Input[str] engine: Database's engine version id
        :param pulumi.Input[bool] is_ha_cluster: Enable or disable high availability for the database instance
        :param pulumi.Input[str] name: Name of the database instance
        :param pulumi.Input[str] node_type: The type of database instance you want to create
        :param pulumi.Input[str] organization_id: The organization_id you want to attach the resource to
        :param pulumi.Input[str] password: Password for the first user of the database instance
        :param pulumi.Input[str] region: The region you want to attach the resource to
        :param pulumi.Input[list] tags: List of tags ["tag1", "tag2", ...] attached to a database instance
        :param pulumi.Input[str] user_name: Identifier for the first user of the database instance
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['disable_backup'] = disable_backup
            if engine is None:
                raise TypeError("Missing required property 'engine'")
            __props__['engine'] = engine
            __props__['is_ha_cluster'] = is_ha_cluster
            __props__['name'] = name
            if node_type is None:
                raise TypeError("Missing required property 'node_type'")
            __props__['node_type'] = node_type
            __props__['organization_id'] = organization_id
            if password is None:
                raise TypeError("Missing required property 'password'")
            __props__['password'] = password
            __props__['region'] = region
            __props__['tags'] = tags
            if user_name is None:
                raise TypeError("Missing required property 'user_name'")
            __props__['user_name'] = user_name
            __props__['certificate'] = None
            __props__['endpoint_ip'] = None
            __props__['endpoint_port'] = None
            __props__['read_replicas'] = None
        super(RdbInstanceBeta, __self__).__init__(
            'scaleway:index/rdbInstanceBeta:RdbInstanceBeta',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, certificate=None, disable_backup=None, endpoint_ip=None, endpoint_port=None, engine=None, is_ha_cluster=None, name=None, node_type=None, organization_id=None, password=None, read_replicas=None, region=None, tags=None, user_name=None):
        """
        Get an existing RdbInstanceBeta resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate: Certificate of the database instance
        :param pulumi.Input[bool] disable_backup: Disable automated backup for the database instance
        :param pulumi.Input[str] endpoint_ip: Endpoint IP of the database instance
        :param pulumi.Input[float] endpoint_port: Endpoint port of the database instance
        :param pulumi.Input[str] engine: Database's engine version id
        :param pulumi.Input[bool] is_ha_cluster: Enable or disable high availability for the database instance
        :param pulumi.Input[str] name: Name of the database instance
        :param pulumi.Input[str] node_type: The type of database instance you want to create
        :param pulumi.Input[str] organization_id: The organization_id you want to attach the resource to
        :param pulumi.Input[str] password: Password for the first user of the database instance
        :param pulumi.Input[list] read_replicas: Read replicas of the database instance
        :param pulumi.Input[str] region: The region you want to attach the resource to
        :param pulumi.Input[list] tags: List of tags ["tag1", "tag2", ...] attached to a database instance
        :param pulumi.Input[str] user_name: Identifier for the first user of the database instance

        The **read_replicas** object supports the following:

          * `ip` (`pulumi.Input[str]`)
          * `name` (`pulumi.Input[str]`)
          * `port` (`pulumi.Input[float]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["certificate"] = certificate
        __props__["disable_backup"] = disable_backup
        __props__["endpoint_ip"] = endpoint_ip
        __props__["endpoint_port"] = endpoint_port
        __props__["engine"] = engine
        __props__["is_ha_cluster"] = is_ha_cluster
        __props__["name"] = name
        __props__["node_type"] = node_type
        __props__["organization_id"] = organization_id
        __props__["password"] = password
        __props__["read_replicas"] = read_replicas
        __props__["region"] = region
        __props__["tags"] = tags
        __props__["user_name"] = user_name
        return RdbInstanceBeta(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
