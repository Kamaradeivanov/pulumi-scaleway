# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetRegistryImageBetaResult:
    """
    A collection of values returned by getRegistryImageBeta.
    """
    def __init__(__self__, id=None, image_id=None, name=None, namespace_id=None, organization_id=None, region=None, size=None, tags=None, visibility=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if image_id and not isinstance(image_id, str):
            raise TypeError("Expected argument 'image_id' to be a str")
        __self__.image_id = image_id
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if namespace_id and not isinstance(namespace_id, str):
            raise TypeError("Expected argument 'namespace_id' to be a str")
        __self__.namespace_id = namespace_id
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        __self__.organization_id = organization_id
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        __self__.region = region
        if size and not isinstance(size, float):
            raise TypeError("Expected argument 'size' to be a float")
        __self__.size = size
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        __self__.tags = tags
        if visibility and not isinstance(visibility, str):
            raise TypeError("Expected argument 'visibility' to be a str")
        __self__.visibility = visibility
class AwaitableGetRegistryImageBetaResult(GetRegistryImageBetaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRegistryImageBetaResult(
            id=self.id,
            image_id=self.image_id,
            name=self.name,
            namespace_id=self.namespace_id,
            organization_id=self.organization_id,
            region=self.region,
            size=self.size,
            tags=self.tags,
            visibility=self.visibility)

def get_registry_image_beta(image_id=None,name=None,namespace_id=None,organization_id=None,region=None,tags=None,opts=None):
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()


    __args__['imageId'] = image_id
    __args__['name'] = name
    __args__['namespaceId'] = namespace_id
    __args__['organizationId'] = organization_id
    __args__['region'] = region
    __args__['tags'] = tags
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('scaleway:index/getRegistryImageBeta:getRegistryImageBeta', __args__, opts=opts).value

    return AwaitableGetRegistryImageBetaResult(
        id=__ret__.get('id'),
        image_id=__ret__.get('imageId'),
        name=__ret__.get('name'),
        namespace_id=__ret__.get('namespaceId'),
        organization_id=__ret__.get('organizationId'),
        region=__ret__.get('region'),
        size=__ret__.get('size'),
        tags=__ret__.get('tags'),
        visibility=__ret__.get('visibility'))
